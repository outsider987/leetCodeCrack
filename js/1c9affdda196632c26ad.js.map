{"version":3,"file":"1c9affdda196632c26ad.js","mappings":";;;;;;;;;;;;;;;AAAiD;AACjD;AACA,sBAAsB,6CAAM;AAC5B;AACA,UAAU,8CAA8C;AACxD,UAAU,6CAA6C;AACvD,UAAU,mDAAmD;AAC7D,UAAU,8CAA8C;AACxD;AACA,qDAAqD,OAAO;AAC5D,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAO,CAAC,oDAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,WAAW,0DAAmB,aAAa,0BAA0B;AACrE;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;AC5EI;AACe;AACzC;AACA,WAAW,0DAAmB,CAAC,0DAAM;AACrC;AACA,iEAAe,KAAK,EAAC","sources":["webpack://leetcodecrack/./src/components/Canvas.tsx","webpack://leetcodecrack/./src/pages/Home/Canvas/Chart.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nconst Canvas = (props) => {\n    const canvasRef = useRef(null);\n    const results = [\n        { mood: 'Angry', total: 1499, shade: '#0a9627' },\n        { mood: 'Happy', total: 478, shade: '#960A2C' },\n        { mood: 'Melancholic', total: 332, shade: '#332E2E' },\n        { mood: 'Gloomy', total: 195, shade: '#F73809' },\n    ];\n    let totalNumberOfPeople = results.reduce((sum, { total }) => sum + total, 0);\n    useEffect(() => {\n        let currentAngle = 0;\n        if (canvasRef.current) {\n            const canvas = canvasRef.current;\n            const ctx = canvas.getContext('2d');\n            var cw = canvas.width;\n            var ch = canvas.height;\n            var nextTime = 0;\n            var duration = 1000;\n            var endingPct = 75;\n            var pct = 0;\n            var increment = duration / pct;\n            var cx = cw / 2;\n            var cy = ch / 2;\n            var img = new Image();\n            img.onload = start;\n            img.src = require('~/assets/img/me.jpg');\n            function start() {\n                requestAnimationFrame(animate);\n            }\n            function animate(time) {\n                draw(pct);\n                pct++;\n                if (pct <= endingPct) {\n                    requestAnimationFrame(animate);\n                }\n            }\n            function draw(pct) {\n                // //\n                // var endRadians = -Math.PI / 2 + (Math.PI * 2 * pct) / 100;\n                // //\n                // ctx.fillStyle = 'black';\n                // ctx.fillRect(0, 0, cw, ch);\n                // //\n                // ctx.beginPath();\n                // ctx.arc(cx, cy, 100, -Math.PI / 2, endRadians);\n                // ctx.lineTo(cx, cy);\n                // ctx.save();\n                // ctx.clip();\n                // ctx.drawImage(img, cx - img.width / 2, cx - img.height / 2);\n                // ctx.restore();\n                for (let moodValue of results) {\n                    //calculating the angle the slice (portion) will take in the chart\n                    let portionAngle = (moodValue.total / totalNumberOfPeople) * 2 * Math.PI;\n                    //drawing an arc and a line to the center to differentiate the slice from the rest\n                    ctx.beginPath();\n                    ctx.arc(100, 100, 100, currentAngle, currentAngle + portionAngle);\n                    currentAngle += portionAngle;\n                    ctx.lineTo(100, 100);\n                    ctx.save();\n                    ctx.clip();\n                    //filling the slices with the corresponding mood's color\n                    ctx.fillStyle = moodValue.shade;\n                    ctx.fill();\n                    ctx.restore();\n                }\n            }\n            //   start();\n        }\n    }, []);\n    return React.createElement(\"canvas\", { ...props, ref: canvasRef });\n};\nCanvas.defaultProps = {\n    width: window.innerWidth / 2,\n    height: window.innerHeight / 2,\n};\nexport default Canvas;\n","import React from 'react';\nimport Canvas from '~/components/Canvas';\nconst Chart = () => {\n    return React.createElement(Canvas, null);\n};\nexport default Chart;\n"],"names":[],"sourceRoot":""}