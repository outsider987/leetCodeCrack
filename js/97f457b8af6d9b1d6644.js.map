{"version":3,"file":"97f457b8af6d9b1d6644.js","mappings":";;;;;;;;;;;;;;;;;;AAAgD;AACO;AACT;AACqB;AACnE;AACA;AACA,qBAAqB,6CAAM,CAAC,yEAAyB;AACrD,sCAAsC,+CAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qDAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAmB,CAAC,2DAAU,IAAI,mFAAmF;AAC7I,uBAAuB,0DAAmB,CAAC,2DAAU,IAAI,oFAAoF;AAC7I;AACA,WAAW,0DAAmB,CAAC,iEAAa,IAAI,YAAY;AAC5D;AACA,iEAAe,SAAS,EAAC","sources":["webpack://leetcodecrack/./src/pages/Home/Sort/MergeSort.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport LayoutDivider from '~/components/LayoutDivider';\nimport LayoutSort from '~/layouts/LayoutSort';\nimport { getRandomNoDuplicateArray, sleep } from '~/utils/regular';\nconst MergeSort = () => {\n    console.log('Merge Rerender');\n    const refArray = useRef(getRandomNoDuplicateArray(80));\n    const [tempArray, setTempArray] = useState(refArray.current);\n    const merge = async (left, right) => {\n        const result = [];\n        let leftIndex = 0;\n        let rightIndex = 0;\n        let pivot = refArray.current.findIndex((item) => item === left[0]);\n        while (leftIndex < left.length && rightIndex < right.length) {\n            if (left[leftIndex] < right[rightIndex]) {\n                result.push(left[leftIndex]);\n                leftIndex++;\n            }\n            else {\n                result.push(right[rightIndex]);\n                rightIndex++;\n            }\n        }\n        const t = result\n            .concat(left.slice(leftIndex))\n            .concat(right.slice(rightIndex));\n        refArray.current = replaceOrignalPartArray(refArray.current, pivot, t);\n        setTempArray(refArray.current);\n        await sleep(100);\n        return t;\n    };\n    const mergeSort = async (array) => {\n        if (array.length === 1) {\n            return array;\n        }\n        const length = array.length;\n        const middle = Math.floor(length / 2);\n        const left = array.slice(0, middle);\n        const right = array.slice(middle);\n        // refArray.current = replaceOrignalPartArray(refArray.current, right);\n        // setTempArray(refArray.current);\n        // await sleep(100);\n        return merge(await mergeSort(left), await mergeSort(right));\n    };\n    const onStart = async () => {\n        setTempArray(await mergeSort(refArray.current));\n    };\n    const replaceOrignalPartArray = (orgArray, pivot, changeArray) => {\n        const temp = new Array(...orgArray);\n        temp.splice(pivot, changeArray.length, ...changeArray);\n        return temp;\n    };\n    const content = {\n        desktop: () => (React.createElement(LayoutSort, { title: \"MergeSort\", isDesktop: true, boxDatas: refArray.current, onStart: onStart })),\n        mobile: () => (React.createElement(LayoutSort, { title: \"MergeSort\", isDesktop: false, boxDatas: refArray.current, onStart: onStart })),\n    };\n    return React.createElement(LayoutDivider, { ...content });\n};\nexport default MergeSort;\n"],"names":[],"sourceRoot":""}