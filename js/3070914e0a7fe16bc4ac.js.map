{"version":3,"file":"3070914e0a7fe16bc4ac.js","mappings":";;;;;;;;;;;;;;;AAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,2BAA2B,WAAW;AACrE;AACA,6CAA6C,8CAA8C,EAAE,wCAAwC,EAAE,gBAAgB,2BAA2B;AAClL;AACA,wBAAwB;AACxB,iEAAe,MAAM,EAAC;AACtB;;;;;;;;;;;;;;;;;;;;;;;;;;ACZ2D;AACH;AACE;AAClB;AACJ;AACQ;AACM;AACN;AACI;AACO;AAChD;AACP;AACA;AACA;AACA;AACA,yBAAyB,wDAAW,CAAC,8CAAU;AAC/C,qBAAqB,wDAAW;AAChC,+CAA+C,+CAAQ;AACvD,oCAAoC,+CAAQ;AAC5C,wBAAwB,6CAAM;AAC9B,uBAAuB,6CAAM;AAC7B,sBAAsB,6CAAM;AAC5B,wBAAwB,6CAAM;AAC9B,4BAA4B,+CAAQ;AACpC;AACA;AACA,cAAc,UAAU,iEAAoB,iCAAiC;AAC7E,cAAc,UAAU,mEAAsB,yBAAyB;AACvE;AACA;AACA,cAAc,UAAU,mEAAsB,yBAAyB;AACvE,cAAc,UAAU,oEAAuB,qBAAqB;AACpE;AACA;AACA,YAAY,0BAA0B,EAAE,yDAAO;AAC/C,YAAY,kDAAkD,EAAE,qDAAU;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY,kDAAc,CAAC,6DAAc,GAAG,8BAA8B;AAC1E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,k8MAAW,SAAS;AAC3C;AACA,IAAI,gDAAS;AACb;AACA,KAAK;AACL,YAAY,0DAAmB,CAAC,uDAAc,QAAQ,0DAAmB,UAAU,kCAAkC;AACrH,8DAA8D,0DAAmB,UAAU,uCAAuC;AAClI,YAAY,0DAAmB;AAC/B;AACA;AACA,YAAY,0DAAmB,aAAa,6BAA6B;AACzE;AACA,QAAQ,0DAAmB,WAAW,yCAAyC;AAC/E,YAAY,0DAAmB,UAAU,uCAAuC;AAChF,gBAAgB,0DAAmB,CAAC,2EAAK,IAAI,uKAAuK;AACpN,gBAAgB,0DAAmB,WAAW,+BAA+B;AAC7E,gBAAgB,0DAAmB,CAAC,2EAAK,IAAI,+KAA+K;AAC5N,gBAAgB,0DAAmB,WAAW,+BAA+B;AAC7E,YAAY,0DAAmB,UAAU,6CAA6C;AACtF,gBAAgB,0DAAmB,CAAC,kDAAI,IAAI,wBAAwB;AACpE,YAAY,0DAAmB,UAAU,2BAA2B;AACpE,gBAAgB,0DAAmB,CAAC,4EAAM,IAAI,wCAAwC;AACtF,YAAY,0DAAmB,UAAU,mCAAmC;AAC5E,gBAAgB,0DAAmB,CAAC,4EAAM,IAAI,2CAA2C;AACzF,gBAAgB,0DAAmB,UAAU,+BAA+B;AAC5E,oBAAoB,0DAAmB,WAAW,4CAA4C;AAC9F,qCAAqC,+BAA+B;AACpE,oCAAoC,8BAA8B;AAClE,6DAA6D,0DAAmB,WAAW,2CAA2C,KAAK,UAAU,aAAa,YAAY;AAC9K,gBAAgB,0DAAmB,UAAU,+EAA+E;AAC5H,oBAAoB,0DAAmB,UAAU,KAAK,mBAAO,CAAC,oGAA6C,GAAG;AAC9G,oBAAoB,0DAAmB;AACvC;AACA,iEAAe,KAAK,EAAC","sources":["webpack://leetcodecrack/./node_modules/outsiderreact/dist/components/Button/index.js","webpack://leetcodecrack/./src/pages/Home/Member/Login.tsx"],"sourcesContent":["import React from 'react';\r\nconst Button = (props) => {\r\n    const whiteClass = `bg-white \n   text-[#121212] hover:bg-[#121212] hover:text-white`;\r\n    const darkClass = `bg-[#121212]  \n   text-white hover:bg-white hover:text-[#121212]`;\r\n    return (React.createElement(\"button\", Object.assign({}, props, { \"data-testid\": \"btn\", className: `flex items-center justify-center border border-solid\n       border-black py-[0.8125rem]\n    px-[0.625rem] font-bold leading-[100%] ${props.isRounded ? 'rounded-full' : 'rounded'} ${props.isWhite ? whiteClass : darkClass} ${props.className}`, onClick: props.onClick }), props.children));\r\n};\r\nButton.defaultProps = { isRounded: false, isWhite: true };\r\nexport default Button;\r\n//# sourceMappingURL=index.js.map","import React, { useEffect, useRef, useState } from 'react';\nimport Input from 'outsiderreact/dist/components/Input';\nimport Button from 'outsiderreact/dist/components/Button';\nimport { Link } from 'react-router-dom';\nimport useAuthApi from '~/api/auth';\nimport { useForm } from '~/hooks/useMyForm';\nimport { validateRegexp } from '~/utils/validate';\nimport { selectAuth, store } from '~/store';\nimport { setAlertDialog } from '~/store/global';\nimport { useDispatch, useSelector } from 'react-redux';\nexport const LoginInitial = {\n    email: 'test@gmail.com',\n    password: 'Asd123!',\n};\nconst Login = () => {\n    const authSelector = useSelector(selectAuth);\n    const dispatch = useDispatch();\n    const [accessCount, setAccessCountToken] = useState(10);\n    const [tokeType, setTokeType] = useState('access');\n    const firstRender = useRef(false);\n    const intervalId = useRef(0);\n    const countTime = useRef(10);\n    const tokeTypeRef = useRef('access');\n    const [test, setTest] = useState('');\n    const rules = {\n        email: [\n            { validate: validateRegexp.email, message: 'wrong mail formate' },\n            { validate: validateRegexp.require, message: 'need value' },\n        ],\n        password: [\n            { validate: validateRegexp.require, message: 'need value' },\n            { validate: validateRegexp.password, message: 'wrong ' },\n        ],\n    };\n    const { validator, handleSubmit } = useForm(LoginInitial, rules);\n    const { POST_LOGIN, GET_TokenTest, GET_USER, GET_LOGOUT } = useAuthApi();\n    const onSubmit = handleSubmit(async (data) => {\n        if (!data)\n            throw 'submit failed';\n        const res = await POST_LOGIN(data);\n        if (res.data.status) {\n            firstRender.current = true;\n            countTime.current = 10;\n        }\n    });\n    useEffect(() => {\n        clearInterval(intervalId.current);\n        tokeTypeRef.current = 'access';\n        setTokeType(tokeTypeRef.current);\n        countTime.current = 10;\n        setAccessCountToken(countTime.current);\n        if (authSelector.user.accessToken !== '') {\n            intervalId.current =\n                countTime.current > 0 &&\n                    setInterval(() => {\n                        setAccessCountToken(--countTime.current);\n                        if (countTime.current === 0 && tokeTypeRef.current === 'access') {\n                            tokeTypeRef.current = 'refresh';\n                            setTokeType(tokeTypeRef.current);\n                            countTime.current = 10;\n                            setAccessCountToken(10);\n                            // clearInterval(intervalId.current as any);\n                        }\n                        if (countTime.current === 0 && tokeTypeRef.current === 'refresh') {\n                            clearInterval(intervalId.current);\n                        }\n                    }, 1000);\n        }\n    }, [authSelector.user.accessToken]);\n    const onTestToken = (e) => {\n        e.preventDefault();\n        GET_TokenTest().then((res) => {\n            store.dispatch(setAlertDialog({ show: true, msg: 'test work' }));\n        });\n    };\n    const onGoogleClick = async (event) => {\n        event.preventDefault();\n        // const res = await GET_GoogleLogin();\n        // console.log(res.data);\n        window.open(`${process.env.API_URL}/auth/google`, '_self');\n    };\n    useEffect(() => {\n        GET_USER().then((res) => console.log(setTest(res.data)));\n    }, []);\n    return (React.createElement(React.Fragment, null, React.createElement(\"div\", { className: \"flex h-full w-full \" },\n        authSelector.user.userInformation.username !== '' && (React.createElement(\"div\", { className: \"flex flex-col text-white\" },\n            React.createElement(\"span\", null,\n                \"name:\",\n                authSelector.user.userInformation.username),\n            React.createElement(\"button\", { onClick: () => GET_LOGOUT() }, \"log out \"))),\n        JSON.stringify(test),\n        React.createElement(\"form\", { className: \"m-auto w-[50vw] space-y-6 \" },\n            React.createElement(\"div\", { className: \"flex flex-col space-y-5 \" },\n                React.createElement(Input, { name: \"email\", label: \"Account\", className: \"text-white\", type: \"text\", onChange: validator.noWhiteSpaceChange, value: validator.values.email, placeholder: \"Account\" }),\n                React.createElement(\"span\", { className: \" text-orange-500\" }, validator.errors.email.message),\n                React.createElement(Input, { name: \"password\", label: \"Password\", className: \"text-white\", type: \"text\", onChange: validator.noWhiteSpaceChange, value: validator.values.password, placeholder: \"Password\" }),\n                React.createElement(\"span\", { className: \" text-orange-500\" }, validator.errors.password.message)),\n            React.createElement(\"div\", { className: \"flex font-bold text-orange-400\" },\n                React.createElement(Link, { to: \"/member/register\" }, \"Register?\")),\n            React.createElement(\"div\", { className: \"flex w-full \" },\n                React.createElement(Button, { onClick: onSubmit, className: \"m-auto\" }, \"Submit\")),\n            React.createElement(\"div\", { className: \"flex w-full flex-col\" },\n                React.createElement(Button, { onClick: onTestToken, className: \"m-auto\" }, \"TokenTes\"),\n                React.createElement(\"div\", { className: \"grid grid-cols-2\" },\n                    React.createElement(\"span\", { className: \"max-w-xs break-all text-white\" }, tokeType === 'refresh'\n                        ? `refresh:${authSelector.user.refreshToken}`\n                        : `access:${authSelector.user.accessToken}`),\n                    authSelector.user.accessToken !== '' && (React.createElement(\"span\", { className: \"text-xl font-bold text-white\" }, `${tokeType} expired at ${accessCount}`))),\n                React.createElement(\"div\", { className: \"flex cursor-pointer space-x-1 text-white\", onClick: onGoogleClick },\n                    React.createElement(\"img\", { src: require('~/assets/svg/btn_google_dark_normal_ios.svg') }),\n                    React.createElement(\"button\", null, \"Google Login\")))))));\n};\nexport default Login;\n"],"names":[],"sourceRoot":""}