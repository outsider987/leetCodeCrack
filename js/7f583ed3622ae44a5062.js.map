{"version":3,"file":"7f583ed3622ae44a5062.js","mappings":"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","sources":["webpack://leetcodecrack/./node_modules/outsiderreact/dist/components/Button/index.js","webpack://leetcodecrack/./src/components/Input.tsx","webpack://leetcodecrack/./src/components/Member/Account.tsx","webpack://leetcodecrack/./src/components/Member/ThridPartySSO.tsx","webpack://leetcodecrack/./src/pages/Home/Member/Login.tsx"],"sourcesContent":["import React from 'react';\r\nconst Button = (props) => {\r\n    const whiteClass = `bg-white \n   text-[#121212] hover:bg-[#121212] hover:text-white`;\r\n    const darkClass = `bg-[#121212]  \n   text-white hover:bg-white hover:text-[#121212]`;\r\n    return (React.createElement(\"button\", Object.assign({}, props, { \"data-testid\": \"btn\", className: `flex items-center justify-center border border-solid\n       border-black py-[0.8125rem]\n    px-[0.625rem] font-bold leading-[100%] ${props.isRounded ? 'rounded-full' : 'rounded'} ${props.isWhite ? whiteClass : darkClass} ${props.className}`, onClick: props.onClick }), props.children));\r\n};\r\nButton.defaultProps = { isRounded: false, isWhite: true };\r\nexport default Button;\r\n//# sourceMappingURL=index.js.map","import * as React from 'react';\nconst Input = (props) => {\n    return (React.createElement(\"div\", { className: `flex flex-col ` + props.className },\n        props.label != undefined && React.createElement(\"span\", { className: \"flex\" }, props.label),\n        React.createElement(\"input\", { ...props, \"data-testid\": \"add-word-input\", style: { backgroundColor: props.backgroundColor }, className: `w-auto rounded-md border-2\n            border-solid border-opacity-50 bg-black\n          px-2 pt-5 pb-4 text-sm\n           leading-4  \n           tracking-wide text-white outline-none placeholder:opacity-30\n           focus:border-orange-400\n            focus:opacity-100\n          ${props.inputClassName}`, type: props.type, placeholder: props.placeholder, value: props.value, autoFocus: props.autoFocus, onChange: props.onChange })));\n};\nInput.defaultProps = { autoFocus: false };\nexport default Input;\n","import Input from '../Input';\nimport React from 'react';\nconst Account = ({ validator }) => {\n    return (React.createElement(\"div\", { className: \"flex flex-col space-y-5 \" },\n        React.createElement(Input, { name: \"email\", label: \"Account\", className: \"text-white\", type: \"text\", onChange: validator.noWhiteSpaceChange, value: validator.values.email, placeholder: \"Account\" }),\n        React.createElement(\"span\", { className: \" text-orange-500\" }, validator.errors.email.message),\n        React.createElement(Input, { name: \"password\", label: \"Password\", className: \"text-white\", type: \"text\", onChange: validator.noWhiteSpaceChange, value: validator.values.password, placeholder: \"Password\" }),\n        React.createElement(\"span\", { className: \" text-orange-500\" }, validator.errors.password.message)));\n};\nexport default Account;\n","import React from 'react';\nconst ThridPartySSO = () => {\n    const onGoogleClick = async (event) => {\n        event.preventDefault();\n        // const res = await GET_GoogleLogin();\n        // console.log(res.data);\n        window.open(`${process.env.API_URL}/auth/google`, '_self');\n    };\n    return (React.createElement(\"div\", { className: \"flex w-full flex-col\" },\n        React.createElement(\"div\", { className: \"flex cursor-pointer space-x-1 text-white\", onClick: onGoogleClick },\n            React.createElement(\"img\", { src: require('~/assets/svg/btn_google_dark_normal_ios.svg'), alt: '' }),\n            React.createElement(\"button\", null, \"Google Login\"))));\n};\nexport default ThridPartySSO;\n","import React, { useEffect, useRef, useState } from 'react';\nimport Button from 'outsiderreact/dist/components/Button';\nimport { Link } from 'react-router-dom';\nimport useAuthApi from '~/api/auth';\nimport { useForm } from '~/hooks/useMyForm';\nimport { validateRegexp } from '~/utils/validate';\nimport { selectAuth, store } from '~/store';\nimport { setAlertDialog } from '~/store/global';\nimport { useSelector } from 'react-redux';\nimport Account from '~/components/Member/Account';\nimport ThridPartySSO from '~/components/Member/ThridPartySSO';\nexport const LoginInitial = {\n    email: 'test@gmail.com',\n    password: 'Asd123!',\n};\nconst Login = () => {\n    const authSelector = useSelector(selectAuth);\n    const [accessCount, setAccessCountToken] = useState(10);\n    const [tokeType, setTokeType] = useState('access');\n    const firstRender = useRef(false);\n    const intervalId = useRef(0);\n    const countTime = useRef(10);\n    const tokeTypeRef = useRef('access');\n    document.cookie = 'name=value';\n    const rules = {\n        email: [\n            { validate: validateRegexp.email, message: 'wrong mail formate' },\n            { validate: validateRegexp.require, message: 'need value' },\n        ],\n        password: [\n            { validate: validateRegexp.require, message: 'need value' },\n            { validate: validateRegexp.password, message: 'wrong ' },\n        ],\n    };\n    const { validator, handleSubmit } = useForm(LoginInitial, rules);\n    const { POST_LOGIN, GET_TokenTest, GET_USER, GET_LOGOUT } = useAuthApi();\n    const onSubmit = handleSubmit(async (data) => {\n        if (!data)\n            throw 'submit failed';\n        const res = await POST_LOGIN(data);\n        if (res.data.status) {\n            firstRender.current = true;\n            countTime.current = 10;\n        }\n    });\n    useEffect(() => {\n        clearInterval(intervalId.current);\n        tokeTypeRef.current = 'access';\n        setTokeType(tokeTypeRef.current);\n        countTime.current = 10;\n        setAccessCountToken(countTime.current);\n        if (authSelector.user.accessToken !== '') {\n            intervalId.current =\n                countTime.current > 0 &&\n                    setInterval(() => {\n                        setAccessCountToken(--countTime.current);\n                        if (countTime.current === 0 && tokeTypeRef.current === 'access') {\n                            tokeTypeRef.current = 'refresh';\n                            setTokeType(tokeTypeRef.current);\n                            countTime.current = 10;\n                            setAccessCountToken(10);\n                            // clearInterval(intervalId.current as any);\n                        }\n                        if (countTime.current === 0 && tokeTypeRef.current === 'refresh') {\n                            clearInterval(intervalId.current);\n                        }\n                    }, 1000);\n        }\n    }, [authSelector.user.accessToken]);\n    const onTestToken = (e) => {\n        e.preventDefault();\n        GET_TokenTest().then((res) => {\n            store.dispatch(setAlertDialog({ show: true, msg: 'test work', title: 'test' }));\n        });\n    };\n    useEffect(() => {\n        const test = async () => {\n            const res1 = await GET_USER();\n            console.log(res1);\n            console.log('123');\n        };\n        test();\n    }, []);\n    return (React.createElement(React.Fragment, null, React.createElement(\"div\", { className: \"flex h-full w-full \" },\n        authSelector.user.userInformation.username !== '' && (React.createElement(\"div\", { className: \"flex flex-col text-white\" },\n            React.createElement(\"span\", null,\n                \"name:\",\n                authSelector.user.userInformation.username),\n            React.createElement(\"button\", { onClick: () => GET_LOGOUT() }, \"log out \"))),\n        React.createElement(\"form\", { className: \"m-auto w-[50vw] space-y-6 \" },\n            React.createElement(Account, { validator: validator }),\n            React.createElement(\"div\", { className: \"flex font-bold text-orange-400\" },\n                React.createElement(Link, { to: \"/member/register\" }, \"Register?\")),\n            React.createElement(\"div\", { className: \"flex w-full \" },\n                React.createElement(Button, { onClick: onSubmit, className: \"m-auto\" }, \"Submit\")),\n            React.createElement(\"div\", { className: \"flex w-full flex-col\" },\n                React.createElement(Button, { onClick: onTestToken, className: \"m-auto\" }, \"TokenTest\"),\n                React.createElement(\"div\", { className: \"grid grid-cols-2\" },\n                    React.createElement(\"span\", { className: \"max-w-xs break-all text-white\" }, tokeType === 'refresh'\n                        ? `refresh:${authSelector.user.refreshToken}`\n                        : `access:${authSelector.user.accessToken}`),\n                    authSelector.user.accessToken !== '' && (React.createElement(\"span\", { className: \"text-xl font-bold text-white\" }, `${tokeType} expired at ${accessCount}`)))),\n            React.createElement(ThridPartySSO, null)))));\n};\nexport default Login;\n"],"names":[],"sourceRoot":""}