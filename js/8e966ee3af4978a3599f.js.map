{"version":3,"file":"8e966ee3af4978a3599f.js","mappings":"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","sources":["webpack://leetcodecrack/./src/canvas/components/ImageEditor/CanvasImageEditor.tsx","webpack://leetcodecrack/./src/canvas/components/Menu/Menu.tsx","webpack://leetcodecrack/./src/canvas/components/Panel/Brush/BrushPanel.tsx","webpack://leetcodecrack/./src/canvas/components/Panel/Brush/ColorPicker.tsx","webpack://leetcodecrack/./src/canvas/components/Panel/Erase/ErasePanel.tsx","webpack://leetcodecrack/./src/canvas/components/Panel/Panel.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useMemo } from 'react';\nimport Views from '~/canvas/ImageEditor/Canvas/Canvas';\nimport Menu from '../Menu/Menu';\nimport { getCurrentZoom, updateCanvasSize } from '~/utils/canvas/mainCanvas';\nimport { LAYOUT_SIZE } from '~/utils/canvas/constants';\nimport { useGlobalContext } from '~/store/context';\nconst CanvasImageEditor = (props) => {\n    const canvasRef = useRef(null);\n    const canvasCursorRef = useRef(null);\n    const { MENU_WIDTH, PANEL_WIDTH } = LAYOUT_SIZE;\n    const [file, setFile] = useState(null);\n    const ViewsRef = useRef(new Views());\n    const ContentRef = useRef();\n    const { isShowPanel, mode } = useGlobalContext();\n    const onClickFile = (e) => {\n        setFile(e.target.files[0]);\n    };\n    useEffect(() => {\n        if (!canvasRef.current || !canvasCursorRef.current || !ContentRef.current || file === null)\n            return;\n        ViewsRef.current.initializeCanvas(canvasRef.current);\n        updateCanvasSize(canvasRef.current, canvasCursorRef.current, ContentRef.current.offsetWidth, ContentRef.current.offsetHeight);\n        ViewsRef.current.loadFile(file);\n        const observer = new ResizeObserver((entries) => {\n            entries.forEach((entry) => {\n                ViewsRef.current.backgroundLayer && resizeCanvas();\n            });\n        });\n        observer.observe(ContentRef.current);\n        return () => {\n            observer.unobserve(ContentRef.current);\n            ViewsRef.current.cleanCanvas();\n        };\n    }, [file]);\n    const contentMaxSize = useMemo(() => {\n        const panelWidth = isShowPanel ? PANEL_WIDTH : 0;\n        return `calc(100% - ${panelWidth || MENU_WIDTH})`;\n    }, [isShowPanel]);\n    const resizeCanvas = () => {\n        if (canvasRef.current && canvasCursorRef.current && file !== null) {\n            // adjust the canvas size to match the size of its container\n            const zoomLevel = getCurrentZoom(ViewsRef.current.ctx);\n            const x = ViewsRef.current.ctx.getTransform().e + ContentRef.current.offsetWidth - canvasRef.current.width;\n            const y = ViewsRef.current.ctx.getTransform().f + ContentRef.current.offsetHeight - canvasRef.current.height;\n            updateCanvasSize(canvasRef.current, canvasCursorRef.current, ContentRef.current.offsetWidth, ContentRef.current.offsetHeight);\n            ViewsRef.current.ctx.translate(x, y);\n            ViewsRef.current.ctx.scale(zoomLevel, zoomLevel);\n            ViewsRef.current.draw();\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: `${props.className} h-[100vh] ` },\n            React.createElement(\"div\", { className: \"flex min-w-[2.5rem]\" },\n                React.createElement(Menu, { ViewsRef: ViewsRef, setFile: setFile, file: file })),\n            React.createElement(\"div\", { ref: ContentRef, className: `relative flex-1  border  border-solid border-yellow-400`, style: { maxWidth: contentMaxSize } },\n                file === null && (React.createElement(\"div\", { className: \"absolute inset-0 flex items-center justify-center\" },\n                    React.createElement(\"div\", { className: \" text-white\" }, \"please click or drag file\"),\n                    React.createElement(\"input\", { onChange: onClickFile, className: `absolute inset-0 z-10 cursor-pointer opacity-0 `, type: \"file\", accept: \"image/*\" }))),\n                React.createElement(\"canvas\", { className: \"z-10\", ref: canvasRef }),\n                React.createElement(\"canvas\", { className: \"pointer-events-none absolute inset-0 flex-1 select-none\", ref: canvasCursorRef })))));\n};\nexport default CanvasImageEditor;\n","import React, { useEffect, useState } from 'react';\nimport { Brush, PanTool as PanIcon, DeleteForever, AutoFixNormal } from '@mui/icons-material';\nimport dynamicClass, { Tools } from '~/canvas/ImageEditor/Tool';\nimport Panel from '../Panel/Panel';\nimport { useGlobalContext } from '~/store/context';\nimport { LAYOUT_SIZE } from '~/utils/canvas/constants';\nconst Menu = ({ ViewsRef, setFile, file }) => {\n    const { mode, setMode, setShowPanel } = useGlobalContext();\n    const [tool, setTool] = useState(null);\n    const { MENU_WIDTH } = LAYOUT_SIZE;\n    useEffect(() => {\n        if (ViewsRef.current.canvas && file !== null) {\n            setShowPanel(true);\n            const ToolClass = dynamicClass(mode);\n            const toolInstance = new ToolClass(ViewsRef.current);\n            setTool(toolInstance);\n            return () => {\n                toolInstance.unRegisterEvent(ViewsRef.current.canvas);\n                setTool(null);\n            };\n        }\n    }, [mode]);\n    const tools = [\n        {\n            icon: React.createElement(Brush, null),\n            onClick: () => setMode(Tools.BrushTool.name),\n        },\n        {\n            icon: React.createElement(PanIcon, null),\n            onClick: () => setMode(Tools.PanTool.name),\n        },\n        {\n            icon: React.createElement(AutoFixNormal, null),\n            onClick: () => setMode(Tools.EraseTool.name),\n        },\n        {\n            icon: React.createElement(DeleteForever, null),\n            onClick: () => setFile(null),\n        },\n    ];\n    return (file && (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: `inset-y-0 left-0 flex min-w-[${MENU_WIDTH}] flex-col  items-center  text-white`, style: { maxWidth: MENU_WIDTH } }, tools.map(({ icon, onClick }, index) => (React.createElement(\"button\", { key: index, onClick: onClick, className: \" row-auto cursor-pointer p-2  hover:bg-slate-500\" }, icon)))),\n        React.createElement(Panel, { title: mode, mode: mode, tool: tool, className: \" \" }))));\n};\nexport default Menu;\n","import React, { useEffect, useState } from 'react';\nimport CanvasColorPicker from './ColorPicker';\nimport Slider from '~/components/Slider';\nimport { useGlobalStorage } from '~/utils/storage';\nimport NumberInput from '~/components/NumberInput';\nconst BrushPanel = (props) => {\n    const { tool } = props;\n    const globalStorage = useGlobalStorage();\n    const globalState = globalStorage.getGlobalStorage();\n    const { brushColor } = globalState || {};\n    const currentColor = brushColor || tool.color;\n    const [color, setColor] = useState(currentColor);\n    const [size, setSize] = useState(tool.size);\n    useEffect(() => {\n        tool.setColor(color);\n    }, [tool]);\n    useEffect(() => {\n        tool.setSize(size);\n    }, [size]);\n    const handleSetColor = (newColor) => {\n        setColor(newColor);\n        tool.setColor(newColor);\n        globalStorage.setGlobalStorage({ ...globalState, brushColor: newColor });\n    };\n    return (React.createElement(\"div\", { className: \"flex-1 flex-col space-y-2\" },\n        React.createElement(CanvasColorPicker, { colorValue: color, setColorCallBack: handleSetColor }),\n        React.createElement(Slider, { size: size, setSizeCallBack: setSize, max: 1000 }),\n        React.createElement(NumberInput, { max: 1000, value: size, setValue: setSize })));\n};\nexport default BrushPanel;\n","import React, { useEffect, useState } from 'react';\nconst CanvasColorPicker = (props) => {\n    // const canvasRef = useRef(null);\n    // const [selectedColor, setSelectedColor] = useState({ R: 255, G: 255, B: 255, A: 1 });\n    // useEffect(() => {\n    //   const canvas = canvasRef.current;\n    //   const context = canvas.getContext('2d');\n    //   // Draw a gradient on the canvas\n    //   const gradient = context.createLinearGradient(0, 0, 0, canvas.height);\n    //   gradient.addColorStop(0, 'rgba(255, 0, 0, 1)');\n    //   gradient.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\n    //   gradient.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\n    //   gradient.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\n    //   gradient.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\n    //   gradient.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\n    //   gradient.addColorStop(1, 'rgba(255, 0, 0, 1)');\n    //   context.fillStyle = gradient;\n    //   context.fillRect(0, 0, canvas.width, canvas.height);\n    // }, []);\n    // function handlePickerClick(event) {\n    //   const canvas = canvasRef.current;\n    //   const x = event.nativeEvent.offsetX;\n    //   const y = event.nativeEvent.offsetY;\n    //   const imageData = canvas.getContext('2d').getImageData(x, y, 1, 1);\n    //   const color = {\n    //     R: imageData.data[0],\n    //     G: imageData.data[1],\n    //     B: imageData.data[2],\n    //     A: imageData.data[3] / 255,\n    //   };\n    //   setSelectedColor(color);\n    // }\n    // const selectedColorString = `rgba(${selectedColor.R}, ${selectedColor.G}, ${selectedColor.B}, ${selectedColor.A})`;\n    const { setColorCallBack, colorValue } = props;\n    const [color, setColor] = useState(colorValue);\n    const handleColorChange = (event) => {\n        setColor(event.target.value);\n        setColorCallBack(event.target.value);\n    };\n    useEffect(() => {\n        setColor(colorValue);\n    }, []);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"input\", { type: \"color\", value: color, onChange: handleColorChange })));\n};\nexport default CanvasColorPicker;\n","import React, { useEffect, useState } from 'react';\nimport Slider from '~/components/Slider';\nimport { useGlobalStorage } from '~/utils/storage';\nconst ErasePanel = (props) => {\n    const { tool } = props;\n    const { getGlobalStorage } = useGlobalStorage();\n    const globalState = getGlobalStorage();\n    const { eraseSize } = globalState || {};\n    const currentSize = eraseSize || tool.size;\n    const [size, setSize] = useState(currentSize);\n    useEffect(() => {\n        tool.setSize(size);\n    }, [size]);\n    return (React.createElement(\"div\", null,\n        React.createElement(Slider, { size: size, setSizeCallBack: setSize, max: 1000 })));\n};\nexport default ErasePanel;\n","import { Close } from '@mui/icons-material';\nimport React, { useMemo } from 'react';\nimport { useGlobalContext } from '~/store/context';\nimport BrushPanel from './Brush/BrushPanel';\nimport { LAYOUT_SIZE } from '~/utils/canvas/constants';\nimport BrushTool from '~/canvas/ImageEditor/Tool/Brush';\nimport PanTool from '~/canvas/ImageEditor/Tool/Pan';\nimport EraseTool from '~/canvas/ImageEditor/Tool/Erase';\nimport ErasePanel from './Erase/ErasePanel';\nconst Panel = (props) => {\n    const { isShowPanel, setShowPanel } = useGlobalContext();\n    const { PANEL_WIDTH } = LAYOUT_SIZE;\n    const { title, children, mode, tool } = props;\n    const panel = useMemo(() => {\n        switch (mode) {\n            case BrushTool.name:\n                return React.createElement(BrushPanel, { tool: tool });\n            case PanTool.name:\n                return React.createElement(React.Fragment, null);\n            case EraseTool.name:\n                return React.createElement(ErasePanel, { tool: tool });\n            default:\n                return React.createElement(React.Fragment, null);\n        }\n    }, [tool]);\n    return (React.createElement(React.Fragment, null, isShowPanel && (React.createElement(\"div\", { className: `h-full flex-1 flex-col max-w-[${PANEL_WIDTH}]` },\n        React.createElement(\"div\", { ...props, className: `flex  flex-row justify-around bg-navbar p-2` },\n            React.createElement(\"div\", { className: \"flex flex-col items-center space-y-3  border-b border-solid text-white\" }, title),\n            React.createElement(\"div\", null,\n                React.createElement(\"button\", { className: \"flex-1 text-white\", onClick: () => setShowPanel(false) },\n                    React.createElement(Close, null)))),\n        panel))));\n};\nexport default Panel;\n"],"names":[],"sourceRoot":""}