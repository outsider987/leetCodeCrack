{"version":3,"file":"29ece6a4568715de6619.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA,+BAA+B;AAC/B,iCAAiC;AACjC;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;;;ACpDuC;AAC5B;AACc;AAC7C;AACA,sBAAsB,6CAAM;AAC5B,4BAA4B,+CAAQ;AACpC,4BAA4B,+CAAQ;AACpC,mBAAmB,gEAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA,KAAK;AACL,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,QAAQ,0DAAmB,UAAU,uDAAuD;AAC5F,8BAA8B,0DAAmB,UAAU,gEAAgE;AAC3H,gBAAgB,0DAAmB,UAAU,0BAA0B;AACvE,gBAAgB,0DAAmB,YAAY,sHAAsH;AACrK,YAAY,0DAAmB,aAAa,qDAAqD;AACjG,QAAQ,0DAAmB,UAAU,oCAAoC;AACzE,YAAY,0DAAmB,CAAC,+CAAM,IAAI,uBAAuB;AACjE,YAAY,0DAAmB,CAAC,+CAAM,IAAI,iBAAiB;AAC3D;AACA,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;;;;ACtDP;AAC2C;AACrE;AACA,YAAY,0DAAmB,UAAU,sEAAsE;AAC/G,QAAQ,0DAAmB,CAAC,2EAAiB,IAAI,kEAAkE;AACnH;AACA,iEAAe,WAAW,EAAC","sources":["webpack://leetcodecrack/./src/canvas/ImageEditor/Line.tsx","webpack://leetcodecrack/./src/components/Chart/CanvasImageEditor.tsx","webpack://leetcodecrack/./src/pages/Home/Canvas/ImageEditor.tsx"],"sourcesContent":["class Line {\n    constructor(ctx, x, y, color, canvas) {\n        this.startPosition = { x: 0, y: 0 };\n        this.lineCoordinates = { x: 0, y: 0 };\n        this.isDrawStart = false;\n        this.getClientOffset = (event) => {\n            const { pageX, pageY } = event.touches ? event.touches[0] : event;\n            const x = pageX - this.canvas.offsetLeft;\n            const y = pageY - this.canvas.offsetTop;\n            return {\n                x,\n                y,\n            };\n        };\n        this.mouseDownListener = (event) => {\n            this.startPosition = this.getClientOffset(event);\n            this.isDrawStart = true;\n        };\n        this.mouseMoveListener = (event) => {\n            if (!this.isDrawStart)\n                return;\n            this.lineCoordinates = this.getClientOffset(event);\n            this.clearCanvas();\n            this.draw();\n        };\n        this.mouseupListener = (event) => {\n            this.isDrawStart = false;\n        };\n        this.clearCanvas = () => {\n            // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        };\n        this.ctx = ctx;\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.canvas = canvas;\n        this.registerEvent(canvas, this.mouseDownListener, this.mouseMoveListener, this.mouseupListener);\n    }\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = this.color;\n        this.ctx.lineWidth = 5;\n        this.ctx.moveTo(this.startPosition.x, this.startPosition.y);\n        this.ctx.lineTo(this.lineCoordinates.x, this.lineCoordinates.y);\n        this.ctx.stroke();\n    }\n    registerEvent(canvas, mouseDownListener, mouseMoveListener, mouseupListener) {\n        canvas.addEventListener('mousedown', mouseDownListener);\n        canvas.addEventListener('mousemove', mouseMoveListener);\n        canvas.addEventListener('mousemove', mouseupListener);\n    }\n}\nexport default Line;\n","import React, { useRef, useEffect, useState } from 'react';\nimport Button from '../Button';\nimport Line from '~/canvas/ImageEditor/Line';\nconst CanvasImageEditor = (props) => {\n    const canvasRef = useRef(null);\n    const [file, setFile] = useState(null);\n    const [mode, setMode] = useState(null);\n    const modes = [Line];\n    const onClickFile = (e) => {\n        setFile(e.target.files[0]);\n    };\n    const onDeleteFile = (e) => {\n        setFile(null);\n    };\n    const onDraw = () => {\n        setMode('draw');\n    };\n    useEffect(() => {\n        if (canvasRef.current && file !== null) {\n            const canvas = canvasRef.current;\n            const ctx = canvasRef.current.getContext('2d');\n            const image = new Image();\n            image.onload = () => {\n                let ratio = Math.min(canvas.width / image.width, canvas.height / image.height);\n                let x = (canvas.width - image.width * ratio) / 2;\n                let y = (canvas.height - image.height * ratio) / 2;\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.drawImage(image, 0, 0, image.width, image.height, x, y, image.width * ratio, image.height * ratio);\n            };\n            image.src = URL.createObjectURL(file);\n            // const canvas = canvasRef.current;\n            // const ctx = canvasRef.current.getContext('2d');\n            const line = new modes[0](ctx, 0, 0, 'white', canvas);\n        }\n        else {\n            const canvas = canvasRef.current;\n            const ctx = canvasRef.current.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }\n    }, [file]);\n    useEffect(() => {\n        if (canvasRef.current && file !== null) {\n        }\n    }, []);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: ` relative border-solid border-yellow-400` },\n            file === null && (React.createElement(\"div\", { className: \"absolute inset-0 flex items-center justify-center\" },\n                React.createElement(\"div\", { className: \" text-white\" }, \"please click or drag file\"),\n                React.createElement(\"input\", { onChange: onClickFile, className: \" absolute inset-0 z-10 cursor-pointer opacity-0\", type: \"file\", accept: \"image/*\" }))),\n            React.createElement(\"canvas\", { ...props, ref: canvasRef, width: 1920, height: 1080 })),\n        React.createElement(\"div\", { className: \"flex w-full space-x-3\" },\n            React.createElement(Button, { onClick: onDeleteFile }, \" delete File\"),\n            React.createElement(Button, { onClick: onDraw }, \" draw mode\"))));\n};\nexport default CanvasImageEditor;\n","import React from 'react';\nimport CanvasImageEditor from '~/components/Chart/CanvasImageEditor';\nconst ImageEditor = () => {\n    return (React.createElement(\"div\", { className: \"m-auto flex w-full flex-col items-center justify-center\" },\n        React.createElement(CanvasImageEditor, { className: \"h-[50vh] w-[65vw] border border-solid border-white \" })));\n};\nexport default ImageEditor;\n"],"names":[],"sourceRoot":""}