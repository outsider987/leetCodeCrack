{"version":3,"file":"d000cb0d8cc38ed59ebb.js","mappings":";;;;;;;;;;;;;;;;AAAiD;AACwD;AACzG;AACA,sBAAsB,6CAAM;AAC5B;AACA,UAAU,8CAA8C;AACxD,UAAU,6CAA6C;AACvD,UAAU,mDAAmD;AAC7D,UAAU,8CAA8C;AACxD,UAAU,2CAA2C;AACrD;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA,oCAAoC,qEAAsB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAoB;AAC5C;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAO,CAAC,oDAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sDAAO,QAAQ,wFAAwF;AAC/H,wBAAwB,+DAAgB;AACxC;AACA;AACA;AACA,sCAAsC,mEAAoB;AAC1D;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,KAAK;AACL,WAAW,0DAAmB,aAAa,0BAA0B;AACrE;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;AC3EI;AACe;AACzC;AACA,YAAY,0DAAmB,UAAU,yCAAyC;AAClF,QAAQ,0DAAmB,CAAC,0DAAM,IAAI,gCAAgC;AACtE;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;;;ACNd;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA","sources":["webpack://leetcodecrack/./src/components/Canvas.tsx","webpack://leetcodecrack/./src/pages/Home/Canvas/Chart.tsx","webpack://leetcodecrack/./src/utils/canvas.ts"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { drawPie, drawSegmentLabel, accumlateOfPercentange, getAngleOfPercentage } from '~/utils/canvas';\nconst Canvas = (props) => {\n    const canvasRef = useRef(null);\n    const results = [\n        { mood: 'Angry', total: 1499, color: '#0a9627' },\n        { mood: 'Happy', total: 478, color: '#960A2C' },\n        { mood: 'Melancholic', total: 332, color: '#332E2E' },\n        { mood: 'Gloomy', total: 195, color: '#F73809' },\n        { mood: 'Gloomy', total: 195, color: 'pink' },\n    ];\n    let totalNumber = results.reduce((sum, { total }) => sum + total, 0);\n    let lastValue = 0;\n    const datas = results.map((result) => {\n        const lastPercentage = Math.ceil((lastValue / totalNumber) * 100);\n        const accumlatePercentage = accumlateOfPercentange(result.total, lastPercentage, totalNumber);\n        lastValue += result.total;\n        return {\n            accumlatePercentage: accumlatePercentage,\n            percentage: Math.round((result.total / totalNumber) * 100),\n            data: result.total,\n            color: result.color,\n            startAngle: getAngleOfPercentage(lastPercentage),\n        };\n    });\n    useEffect(() => {\n        if (canvasRef.current) {\n            const canvas = canvasRef.current;\n            const ctx = canvas.getContext('2d');\n            let cw = (canvas.width = canvasRef.current.clientWidth);\n            let ch = (canvas.height = canvasRef.current.clientHeight);\n            // ctx.fillStyle = 'white';\n            // ctx.fillRect(0, 0, canvas.width, canvas.height);\n            let endingPct = 100;\n            let pct = 0;\n            let cx = Math.ceil(cw / 2);\n            let cy = Math.ceil(ch / 2);\n            let img = new Image();\n            img.onload = start;\n            img.src = require('~/assets/img/me.jpg');\n            function start() {\n                requestAnimationFrame(animate);\n            }\n            function animate(time) {\n                draw(pct);\n                pct++;\n                if (pct <= endingPct) {\n                    requestAnimationFrame(animate);\n                }\n            }\n            function draw(pct) {\n                var endRadians = -Math.PI / 2 + (Math.PI * 2 * pct) / 100;\n                for (const [index, moodValue] of datas.entries()) {\n                    ctx.fillStyle = moodValue.color;\n                    if (endRadians >= moodValue.startAngle && pct <= moodValue.accumlatePercentage) {\n                        if (moodValue.color === '#0a9627') {\n                            // debugger;\n                        }\n                        drawPie(ctx, { startAngle: moodValue.startAngle, endAngle: endRadians, cx, cy, color: moodValue.color });\n                        drawSegmentLabel(ctx, {\n                            cx,\n                            cy,\n                            startAngle: moodValue.startAngle,\n                            endAngle: getAngleOfPercentage(moodValue.accumlatePercentage),\n                            radius: endingPct,\n                            percentage: moodValue.accumlatePercentage,\n                            text: String(moodValue.percentage),\n                        });\n                    }\n                }\n            }\n        }\n    }, []);\n    return React.createElement(\"canvas\", { ...props, ref: canvasRef });\n};\nexport default Canvas;\n","import React from 'react';\nimport Canvas from '~/components/Canvas';\nconst Chart = () => {\n    return (React.createElement(\"div\", { className: \"m-auto flex justify-center\" },\n        React.createElement(Canvas, { className: \"h-[50vh] w-[50vh]\" })));\n};\nexport default Chart;\n","export function drawSegmentLabel(ctx, dto) {\n    const centerDistance = 0.5;\n    ctx.beginPath();\n    ctx.font = '20px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillStyle = 'white';\n    let theta = (dto.startAngle + dto.endAngle) / 2;\n    let deltaY = Math.ceil(Math.sin(theta) * centerDistance * 100);\n    let deltaX = Math.ceil(Math.cos(theta) * centerDistance * 100);\n    ctx.fillText(dto.text, deltaX + dto.cx, deltaY + dto.cy);\n    ctx.closePath();\n}\nexport function drawPie(ctx, dto) {\n    ctx.beginPath();\n    ctx.arc(dto.cx, dto.cy, 100, dto.startAngle, dto.endAngle);\n    // ctx.stroke();\n    ctx.lineTo(dto.cx, dto.cy);\n    ctx.save();\n    ctx.clip();\n    ctx.fillStyle = dto.color;\n    ctx.fill();\n    ctx.restore();\n    ctx.closePath();\n}\nexport const getAngleOfPercentage = (percentage) => {\n    return Math.ceil((-Math.PI / 2 + (Math.PI * 2 * percentage) / 100) * 100) / 100;\n};\nexport const accumlateOfPercentange = (data, percentage, totalNumber) => {\n    return Math.ceil(percentage + (data / totalNumber) * 100);\n};\n"],"names":[],"sourceRoot":""}