{"version":3,"file":"7853357a0d3342506bd7.js","mappings":";;;;;;;;;;;;;;;AAA4D;AAC7B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yEAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA,4BAA4B,yEAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;AC/G3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;ACVQ;AAC7B;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8CAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;AC7DmC;AAC7B;AAC/B;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yEAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,eAAe;AAC/B,2BAA2B,yEAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yEAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;AChFQ;AACF;AACvB;AACP,cAAc,6CAAQ;AACtB,eAAe,8CAAS;AACxB;AACe;AACf;AACA;;;;;;;;;;;;;;;;;;;;ACR2D;AAC5B;AACsB;AACQ;AAC7D;AACA,sBAAsB,6CAAM;AAC5B,4BAA4B,+CAAQ;AACpC,4BAA4B,+CAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA,6BAA6B,yEAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA,8BAA8B,oEAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,QAAQ,0DAAmB,UAAU,uDAAuD;AAC5F,8BAA8B,0DAAmB,UAAU,gEAAgE;AAC3H,gBAAgB,0DAAmB,UAAU,0BAA0B;AACvE,gBAAgB,0DAAmB,YAAY,sHAAsH;AACrK,YAAY,0DAAmB,aAAa,0FAA0F;AACtI,QAAQ,0DAAmB,UAAU,oCAAoC;AACzE,YAAY,0DAAmB,CAAC,+CAAM,IAAI,uBAAuB;AACjE,YAAY,0DAAmB,CAAC,+CAAM,IAAI,iBAAiB;AAC3D,YAAY,0DAAmB,CAAC,+CAAM,IAAI,kBAAkB;AAC5D;AACA,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;;;;ACtFP;AAC2C;AACrE;AACA,YAAY,0DAAmB,UAAU,sEAAsE;AAC/G,QAAQ,0DAAmB,CAAC,2EAAiB,IAAI,iDAAiD;AAClG;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;ACNpB;AACP,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://leetcodecrack/./src/canvas/ImageEditor/Canvas/Canvas.ts","webpack://leetcodecrack/./src/canvas/ImageEditor/Point.ts","webpack://leetcodecrack/./src/canvas/ImageEditor/Tool/Erase.ts","webpack://leetcodecrack/./src/canvas/ImageEditor/Tool/Line.ts","webpack://leetcodecrack/./src/canvas/ImageEditor/Tool/index.ts","webpack://leetcodecrack/./src/components/Chart/CanvasImageEditor.tsx","webpack://leetcodecrack/./src/pages/Home/Canvas/ImageEditor.tsx","webpack://leetcodecrack/./src/utils/canvas/coordinate.ts"],"sourcesContent":["import { getClientOffset } from '~/utils/canvas/coordinate';\nimport Point from './../Point';\nclass CanvasPaint {\n    constructor(ctx, canvas) {\n        this.isDrawStart = false;\n        this.lastView = null;\n        this.mouseDown = (e) => {\n            e.preventDefault();\n            const clientPoint = getClientOffset(e, this.canvas);\n            this.lastPoint.setPoint(clientPoint.x, clientPoint.y);\n            this.isDrawStart = true;\n        };\n        this.mouseMove = (e) => {\n            e.preventDefault();\n            if (!this.isDrawStart)\n                return;\n            this.draw(e);\n            // this.lineCoordinates = this.getClientOffset(event);\n            this.clearCanvas();\n        };\n        this.mouseUp = (e) => {\n            e.preventDefault();\n            this.isDrawStart = false;\n        };\n        this.clearCanvas = () => {\n            // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        };\n        this.ctx = ctx;\n        this.lastPoint = new Point(0, 0);\n        this.canvas = canvas;\n        console.log();\n        this.registerEvent(this.canvas);\n    }\n    draw(file) {\n        const image = new Image();\n        const { ctx, canvas } = this;\n        image.onload = function res() {\n            let ratio = Math.min(canvas.width / image.width, canvas.height / image.height);\n            let x = (canvas.width - image.width * ratio) / 2;\n            let y = (canvas.height - image.height * ratio) / 2;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.drawImage(image, 0, 0, image.width, image.height, x, y, image.width * ratio, image.height * ratio);\n        };\n        image.src = URL.createObjectURL(file);\n    }\n    zoom(e) {\n        const { canvas, ctx } = this;\n        let zoom = 1;\n        e.preventDefault();\n        const clientPoint = getClientOffset(e, canvas);\n        if (e.deltaY < 0) {\n            zoom *= 1.1;\n        }\n        else {\n            zoom *= 0.9;\n        }\n        // ctx.translate(clientPoint.x, clientPoint.y);\n        const lastView = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        ctx.scale(zoom, zoom);\n        // ctx.setTransform(zoom, 0, 0, zoom, (1 - zoom) * clientPoint.x, (1 - zoom) * clientPoint.y);\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // ctx.setTransform(9, 9, 9, zoom, (1 - zoom) * clientPoint.x, (1 - zoom) * clientPoint.y);\n        ctx.putImageData(lastView, 0, 0);\n        // ctx.translate(window.innerWidth / 2, window.innerHeight / 2);\n        // ctx.scale(zoom, zoom);\n        // ctx.translate(-window.innerWidth / 2 + clientPoint.x, -window.innerHeight / 2 + clientPoint.y);\n        // const image = new Image();\n        // const file = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        // image.onload = () => {\n        //   let ratio = Math.min(canvas.width / image.width, canvas.height / image.height);\n        //   let x = (canvas.width - image.width * ratio) / 2;\n        //   let y = (canvas.height - image.height * ratio) / 2;\n        //   ctx.clearRect(0, 0, canvas.width, canvas.height);\n        //   // ctx.drawImage(image, 0, 0, image.width, image.height, x, y, image.width * ratio, image.height * ratio);\n        //   // let ratio = Math.min(canvas.width / image.width, canvas.height / image.height);\n        //   // let x = (canvas.width - image.width * ratio) / 2;\n        //   // let y = (canvas.height - image.height * ratio) / 2;\n        //   // ctx.clearRect(0, 0, canvas.width, canvas.height);\n        //   // ctx.drawImage(image, 0, 0, image.width, image.height, x, y, image.width * ratio, image.height * ratio);\n        // };\n        // let ratio = Math.min(canvas.width / image.width, canvas.height / image.height);\n        // let x = (canvas.width - image.width * ratio) / 2;\n        // let y = (canvas.height - image.height * ratio) / 2;\n        // const lastImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        // // console.log(lastImageData);\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // ctx.putImageData(lastImageData, 0, 0);\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // Redraw the content of the canvas\n        // draw();\n    }\n    registerEvent(canvas) {\n        canvas.addEventListener('mousedown', this.mouseDown);\n        canvas.addEventListener('mousemove', this.mouseMove);\n        canvas.addEventListener('mouseup', this.mouseUp);\n        canvas.addEventListener('touchstart', this.mouseDown);\n        canvas.addEventListener('touchmove', this.mouseMove);\n        canvas.addEventListener('touchend', this.mouseUp);\n        canvas.addEventListener('wheel', this.zoom.bind(this));\n    }\n    unRegisterEvent(canvas) {\n        canvas.removeEventListener('mousedown', this.mouseDown);\n        canvas.removeEventListener('mousemove', this.mouseMove);\n        canvas.removeEventListener('mouseup', this.mouseUp);\n        canvas.removeEventListener('touchstart', this.mouseDown);\n        canvas.removeEventListener('touchmove', this.mouseMove);\n        canvas.removeEventListener('touchend', this.mouseUp);\n        canvas.removeEventListener('wheel', this.zoom);\n    }\n}\nexport default CanvasPaint;\n","class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    setPoint(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\nexport default Point;\n","import Point from '../Point';\nclass EraseTool {\n    constructor(ctx, canvas) {\n        this.isDrawStart = false;\n        this.getClientOffset = (e) => {\n            const { canvas } = this;\n            const { pageX, pageY } = e.touches ? e.touches[0] : e;\n            const rect = canvas.getBoundingClientRect();\n            const x = pageX - rect.left;\n            const y = pageY - rect.top;\n            return {\n                x,\n                y,\n            };\n        };\n        this.mouseDown = (e) => {\n            e.preventDefault();\n            this.isDrawStart = true;\n        };\n        this.mouseMove = (e) => {\n            e.preventDefault();\n            if (!this.isDrawStart)\n                return;\n            const clientPoint = this.getClientOffset(e);\n            const point = new Point(clientPoint.x, clientPoint.y);\n            this.erase(point);\n            this.clearCanvas();\n        };\n        this.mouseUp = (e) => {\n            e.preventDefault();\n            console.log();\n            this.isDrawStart = false;\n        };\n        this.clearCanvas = () => {\n            // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        };\n        this.ctx = ctx;\n        this.size = 5;\n        this.canvas = canvas;\n        this.registerEvent(canvas);\n    }\n    erase(point) {\n        this.ctx.clearRect(point.x, point.y, this.size, this.size);\n    }\n    registerEvent(canvas) {\n        canvas.addEventListener('mousedown', this.mouseDown);\n        canvas.addEventListener('mousemove', this.mouseMove);\n        canvas.addEventListener('mouseup', this.mouseUp);\n        canvas.addEventListener('touchstart', this.mouseDown);\n        canvas.addEventListener('touchmove', this.mouseMove);\n        canvas.addEventListener('touchend', this.mouseUp);\n    }\n    unRegisterEvent(canvas) {\n        canvas.removeEventListener('mousedown', this.mouseDown);\n        canvas.removeEventListener('mousemove', this.mouseMove);\n        canvas.removeEventListener('mouseup', this.mouseUp);\n        canvas.removeEventListener('touchstart', this.mouseDown);\n        canvas.removeEventListener('touchmove', this.mouseMove);\n        canvas.removeEventListener('touchend', this.mouseUp);\n    }\n}\nexport default EraseTool;\n","import { getClientOffset } from '~/utils/canvas/coordinate';\nimport Point from './../Point';\nclass LineTool {\n    constructor(ctx, canvas) {\n        this.isDrawStart = false;\n        this.getClientOffset = (e) => {\n            const { canvas } = this;\n            const { pageX, pageY } = e.touches ? e.touches[0] : e;\n            const rect = canvas.getBoundingClientRect();\n            const x = pageX - rect.left;\n            const y = pageY - rect.top;\n            return {\n                x,\n                y,\n            };\n        };\n        this.setColor = (color) => {\n            this.color = color;\n        };\n        this.mouseDown = (e) => {\n            e.preventDefault();\n            const clientPoint = getClientOffset(e, this.canvas);\n            this.lastPoint.setPoint(clientPoint.x, clientPoint.y);\n            this.isDrawStart = true;\n        };\n        this.mouseMove = (e) => {\n            e.preventDefault();\n            if (!this.isDrawStart)\n                return;\n            this.draw(e);\n            // this.lineCoordinates = this.getClientOffset(event);\n            this.clearCanvas();\n        };\n        this.mouseUp = (e) => {\n            e.preventDefault();\n            this.isDrawStart = false;\n        };\n        this.clearCanvas = () => {\n            // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        };\n        this.ctx = ctx;\n        this.lastPoint = new Point(0, 0);\n        this.setColor('white');\n        this.canvas = canvas;\n        this.registerEvent(canvas);\n        console.log('line');\n    }\n    draw(e) {\n        console.log(this);\n        const { canvas, ctx } = this;\n        const { pageX, pageY } = e.touches ? e.touches[0] : e;\n        const clientPint = getClientOffset(e, canvas);\n        ctx.beginPath();\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.moveTo(this.lastPoint.x, this.lastPoint.y);\n        ctx.lineTo(clientPint.x, clientPint.y);\n        ctx.stroke();\n        const clientPoint = getClientOffset(e, canvas);\n        this.lastPoint.setPoint(clientPoint.x, clientPoint.y);\n        const lastImageData2 = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        console.log(lastImageData2);\n    }\n    registerEvent(canvas) {\n        canvas.addEventListener('mousedown', this.mouseDown);\n        canvas.addEventListener('mousemove', this.mouseMove);\n        canvas.addEventListener('mouseup', this.mouseUp);\n        canvas.addEventListener('touchstart', this.mouseDown);\n        canvas.addEventListener('touchmove', this.mouseMove);\n        canvas.addEventListener('touchend', this.mouseUp);\n    }\n    unRegisterEvent(canvas) {\n        canvas.removeEventListener('mousedown', this.mouseDown);\n        canvas.removeEventListener('mousemove', this.mouseMove);\n        canvas.removeEventListener('mouseup', this.mouseUp);\n        canvas.removeEventListener('touchstart', this.mouseDown);\n        canvas.removeEventListener('touchmove', this.mouseMove);\n        canvas.removeEventListener('touchend', this.mouseUp);\n    }\n}\nexport default LineTool;\n","import EraseTool from './Erase';\nimport LineTool from './Line';\nexport const Tools = {\n    LineTool: LineTool,\n    EraseTool: EraseTool,\n};\nexport default function dynamicClass(name) {\n    return Tools[name];\n}\n","import React, { useRef, useEffect, useState } from 'react';\nimport Button from '../Button';\nimport dynamicClass from '~/canvas/ImageEditor/Tool';\nimport CanvasPaint from '~/canvas/ImageEditor/Canvas/Canvas';\nconst CanvasImageEditor = (props) => {\n    const canvasRef = useRef(null);\n    const [file, setFile] = useState(null);\n    const [mode, setMode] = useState(null);\n    const onClickFile = (e) => {\n        setFile(e.target.files[0]);\n    };\n    const onDeleteFile = (e) => {\n        setFile(null);\n    };\n    const onDraw = () => {\n        setMode('LineTool');\n    };\n    const onErase = () => {\n        setMode('EraseTool');\n    };\n    useEffect(() => {\n        if (canvasRef.current && file !== null) {\n            const canvas = canvasRef.current;\n            const ctx = canvasRef.current.getContext('2d');\n            const image = new Image();\n            const main = new CanvasPaint(ctx, canvas);\n            main.draw(file);\n            // image.onload = () => {\n            //   let ratio = Math.min(canvas.width / image.width, canvas.height / image.height);\n            //   let x = (canvas.width - image.width * ratio) / 2;\n            //   let y = (canvas.height - image.height * ratio) / 2;\n            //   ctx.clearRect(0, 0, canvas.width, canvas.height);\n            //   ctx.drawImage(image, 0, 0, image.width, image.height, x, y, image.width * ratio, image.height * ratio);\n            //   const lastImageData2 = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            //   console.log(lastImageData2);\n            // };\n            // canvas.addEventListener('wheel', (e) => {\n            //   let zoom = 1;\n            //   e.preventDefault();\n            //   const clientPoint = getClientOffset(e, canvas);\n            //   if (e.deltaY < 0) {\n            //     zoom *= 1.1;\n            //   } else {\n            //     zoom *= 0.9;\n            //   }\n            //   // ctx.translate(clientPoint.x, clientPoint.y);\n            //   const lastView = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            //   ctx.scale(zoom, zoom);\n            //   // ctx.setTransform(zoom, 0, 0, zoom, (1 - zoom) * clientPoint.x, (1 - zoom) * clientPoint.y);\n            //   ctx.clearRect(0, 0, canvas.width, canvas.height);\n            //   let ratio = Math.min(canvas.width / image.width, canvas.height / image.height);\n            //   let x = (canvas.width - image.width * ratio) / 2;\n            //   let y = (canvas.height - image.height * ratio) / 2;\n            //   ctx.clearRect(0, 0, canvas.width, canvas.height);\n            //   ctx.drawImage(image, 0, 0, image.width, image.height, x, y, image.width * ratio, image.height * ratio);\n            // });\n            // image.src = URL.createObjectURL(file);\n        }\n        else {\n            const canvas = canvasRef.current;\n            const ctx = canvasRef.current.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }\n    }, [file]);\n    useEffect(() => {\n        if (canvasRef.current && file !== null) {\n            const canvas = canvasRef.current;\n            const ctx = canvasRef.current.getContext('2d');\n            const ToolClass = dynamicClass(mode);\n            let tool = new ToolClass(ctx, canvas);\n            return () => {\n                tool.unRegisterEvent(canvas);\n            };\n        }\n    }, [mode]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: ` relative border-solid border-yellow-400` },\n            file === null && (React.createElement(\"div\", { className: \"absolute inset-0 flex items-center justify-center\" },\n                React.createElement(\"div\", { className: \" text-white\" }, \"please click or drag file\"),\n                React.createElement(\"input\", { onChange: onClickFile, className: \" absolute inset-0 z-10 cursor-pointer opacity-0\", type: \"file\", accept: \"image/*\" }))),\n            React.createElement(\"canvas\", { ...props, ref: canvasRef, width: window.innerWidth * 0.6, height: window.innerHeight / 2 })),\n        React.createElement(\"div\", { className: \"flex w-full space-x-3\" },\n            React.createElement(Button, { onClick: onDeleteFile }, \" delete File\"),\n            React.createElement(Button, { onClick: onDraw }, \" draw mode\"),\n            React.createElement(Button, { onClick: onErase }, \" Erase mode\"))));\n};\nexport default CanvasImageEditor;\n","import React from 'react';\nimport CanvasImageEditor from '~/components/Chart/CanvasImageEditor';\nconst ImageEditor = () => {\n    return (React.createElement(\"div\", { className: \"m-auto flex w-full flex-col items-center justify-center\" },\n        React.createElement(CanvasImageEditor, { className: \" border border-solid border-white \" })));\n};\nexport default ImageEditor;\n","export function getClientOffset(e, canvas) {\n    const { pageX, pageY } = e.touches ? e.touches[0] : e;\n    const rect = canvas.getBoundingClientRect();\n    const x = pageX - rect.left;\n    const y = pageY - rect.top;\n    return {\n        x,\n        y,\n    };\n}\n"],"names":[],"sourceRoot":""}