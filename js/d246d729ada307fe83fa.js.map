{"version":3,"file":"d246d729ada307fe83fa.js","mappings":";;;;;;;;;;;;;;;;;;;AAAoD;AACR;AAClB;AACc;AACJ;AACG;AACvC;AACA,kBAAkB,6CAAM;AACxB,4BAA4B,+CAAQ;AACpC,gCAAgC,+CAAQ;AACxC,kCAAkC,+CAAQ;AAC1C;AACA,IAAI,gDAAS;AACb;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA,KAAK;AACL,IAAI,gDAAS;AACb,QAAQ,oDAAK;AACb,KAAK;AACL,IAAI,gDAAS;AACb;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,8EAA8E;AACrG;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,CAAC,sDAAM,IAAI,mBAAmB;AAC7D,QAAQ,0DAAmB,mBAAmB,gBAAgB;AAC9D,QAAQ,0DAAmB,gBAAgB,oCAAoC;AAC/E,QAAQ,0DAAmB,CAAC,iDAAM,IAAI,sBAAsB;AAC5D;AACA,mBAAmB,0DAAmB,CAAC,6CAAI,IAAI,oBAAoB,WAAW,GAAG,WAAW,GAAG,WAAW,GAAG;AAC7G,SAAS;AACT;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;AChFM;AACnB,gBAAgB,MAAM;AAC7B;AACA;AACA;AACA,YAAY,0DAAmB,WAAW,sDAAsD;AAChG,QAAQ,0DAAmB,qBAAqB,sBAAsB;AACtE,QAAQ,0DAAmB,0BAA0B,mCAAmC;AACxF;;;;;;;;;;;;;;;;;ACR+B;AACL;AACnB,kBAAkB,WAAW;AACpC;AACA,mBAAmB,6CAAM;AACzB;AACA,YAAY,0DAAmB,WAAW,aAAa;AACvD,QAAQ,0DAAmB,wBAAwB,oBAAoB;AACvE,QAAQ,0DAAmB,0BAA0B,qCAAqC;AAC1F;;;;;;;;;;;;;;;ACTO;AACP;AACA","sources":["webpack://leetcodecrack/./src/pages/Home/Canvas/Game.tsx","webpack://leetcodecrack/./src/three/Ball.tsx","webpack://leetcodecrack/./src/three/Player.tsx","webpack://leetcodecrack/./src/utils/hepler.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport React from 'react';\nimport { Player } from '~/three/Player';\nimport { Ball } from '~/three/Ball';\nimport { sleep } from '~/utils/hepler';\nconst Game = () => {\n    const balls = useRef([]);\n    const [time, setTime] = useState(0);\n    const [player, setPlayer] = useState(null);\n    const [mounted, setMounted] = useState(false);\n    //set up listeners\n    useEffect(() => {\n        generateBalls();\n    }, []);\n    useEffect(() => {\n        if (!mounted) {\n            setUpListeners();\n        }\n    }, [player, mounted]);\n    useEffect(() => {\n        sleep(1000).then(() => setTime((t) => t + 1000));\n    }, [time]);\n    useEffect(() => {\n        checkIfCollide();\n    }, [player, balls]);\n    const generateBalls = () => {\n        window.setInterval(() => {\n            balls.current.push({\n                pos: { x: Math.floor(Math.random() * 10) - 5, y: Math.floor(Math.random() * 10) - 5 },\n                nonce: Math.floor(Math.random() * 1000),\n            });\n        }, 5000);\n    };\n    const setUpListeners = () => {\n        if (player) {\n            //only want listeners to be created once so setMounted true so doesn't fire again\n            setMounted(true);\n            window.addEventListener('keydown', (e) => {\n                //player has been created\n                switch (e.key) {\n                    case 'w':\n                        player.current.position.y += 0.2;\n                        break;\n                    case 's':\n                        player.current.position.y -= 0.2;\n                        break;\n                    case 'd':\n                        player.current.position.x += 0.2;\n                        break;\n                    case 'a':\n                        player.current.position.x -= 0.2;\n                        break;\n                    default:\n                        break;\n                }\n                //to force update state\n                setPlayer(Object.create(player));\n            });\n        }\n    };\n    const checkIfCollide = () => {\n        if (player) {\n            for (let i = 0; i < balls.current.length; i++) {\n                if (Math.floor(player.current.position.x) === balls.current[i].pos.x &&\n                    Math.floor(player.current.position.y) === balls.current[i].pos.y) {\n                    balls.current.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    };\n    return (React.createElement(Canvas, { id: 'game-canvas' },\n        React.createElement(\"ambientLight\", { intensity: 0.5 }),\n        React.createElement(\"spotLight\", { position: [10, 15, 10], angle: 0.3 }),\n        React.createElement(Player, { setPlayer: setPlayer }),\n        balls.current.map((ball, i) => {\n            return React.createElement(Ball, { ball: ball, key: `${ball.pos.x}-${ball.pos.y}-${ball.nonce}` });\n        })));\n};\nexport default Game;\n","import React from 'react';\nexport const Ball = ({ ball }) => {\n    //give game ref to ball\n    //   const ref = useRef();\n    //   ball.ref = ref;\n    return (React.createElement(\"mesh\", { position: [ball.pos.x, ball.pos.y, 0], ref: ball.ref },\n        React.createElement(\"sphereGeometry\", { args: [0.25, 16, 16] }),\n        React.createElement(\"meshLambertMaterial\", { attach: 'material', color: 'pink' })));\n};\n","import { useRef } from 'react';\nimport React from 'react';\nexport const Player = ({ setPlayer }) => {\n    //give our app reference to this player object\n    const player = useRef();\n    setPlayer(player);\n    return (React.createElement(\"mesh\", { ref: player },\n        React.createElement(\"boxBufferGeometry\", { attach: 'geometry' }),\n        React.createElement(\"meshLambertMaterial\", { attach: 'material', color: 'orange' })));\n};\n","export const sleep = async (ms) => {\n    return new Promise((r) => setTimeout(r, ms));\n};\n"],"names":[],"sourceRoot":""}