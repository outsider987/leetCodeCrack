{"version":3,"file":"822f66127af421b32f7f.js","mappings":"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","sources":["webpack://leetcodecrack/./src/canvas/components/ImageEditor/CanvasImageEditor.tsx","webpack://leetcodecrack/./src/canvas/components/ImageEditor/CursorCanvas.tsx","webpack://leetcodecrack/./src/canvas/components/ImageEditor/Maincanvas.tsx","webpack://leetcodecrack/./src/canvas/components/Menu/Menu.tsx","webpack://leetcodecrack/./src/canvas/components/Panel/Brush/BrushPanel.tsx","webpack://leetcodecrack/./src/canvas/components/Panel/Brush/ColorPicker.tsx","webpack://leetcodecrack/./src/canvas/components/Panel/Crop/CropPanel.tsx","webpack://leetcodecrack/./src/canvas/components/Panel/Erase/ErasePanel.tsx","webpack://leetcodecrack/./src/canvas/components/Panel/Panel.tsx","webpack://leetcodecrack/./src/components/NumberInput.tsx","webpack://leetcodecrack/./src/components/Slider.tsx"],"sourcesContent":["import React, { useRef, useState, useMemo } from 'react';\nimport Views from '~/canvas/ImageEditor/Canvas/Canvas';\nimport Menu from '../Menu/Menu';\nimport { LAYOUT_SIZE } from '~/utils/canvas/constants';\nimport { useGlobalContext } from '~/store/context';\nimport clsx from 'clsx';\nimport CanvasMain from './Maincanvas';\nimport CursorCanvas from './CursorCanvas';\nimport StateController from '~/canvas/ImageEditor/StateController/StateController';\nimport RasterViews from '~/canvas/ImageEditor/Canvas/RasterCanvas';\nconst CanvasImageEditor = (props) => {\n    const canvasRef = useRef(null);\n    const rasterCanvasRef = useRef(null);\n    const containerRef = useRef(null);\n    const ContentRef = useRef();\n    const ViewsRef = useRef(new Views());\n    const stateController = useRef(new StateController());\n    const rasterViewsRef = useRef(new RasterViews());\n    const { isShowPanel, mode, globalState } = useGlobalContext();\n    const { MENU_WIDTH, PANEL_WIDTH } = LAYOUT_SIZE;\n    const [file, setFile] = useState(null);\n    const onClickFile = (e) => {\n        setFile(e.target.files[0]);\n    };\n    const contentMaxSize = useMemo(() => {\n        const panelWidth = isShowPanel ? PANEL_WIDTH : 0;\n        return `calc(100% - ${panelWidth || MENU_WIDTH})`;\n    }, [isShowPanel]);\n    const menuClasses = clsx('flex', 'min-w-[2.5rem]', 'text-white');\n    const contentClasses = clsx('flex-1', 'border', 'border-solid', 'border-yellow-400', 'w-full', 'relative', 'overflow-hidden');\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { ref: containerRef, className: `${props.className} h-[100vh] ` },\n            React.createElement(\"div\", { className: menuClasses },\n                React.createElement(Menu, { ViewsRef: ViewsRef, setFile: setFile, rasterViewsRef: rasterViewsRef, file: file, stateController: stateController.current })),\n            React.createElement(\"div\", { ref: ContentRef, className: contentClasses, style: { maxWidth: contentMaxSize } },\n                file === null && (React.createElement(\"div\", { className: \"absolute inset-0 flex items-center justify-center\" },\n                    React.createElement(\"div\", { className: \" text-white\" }, \"please click or drag file\"),\n                    React.createElement(\"input\", { onChange: onClickFile, className: `absolute inset-0 z-10 cursor-pointer opacity-0 `, type: \"file\", accept: \"image/*\" }))),\n                React.createElement(CanvasMain, { canvasRef: canvasRef, ContentRef: ContentRef, ViewsRef: ViewsRef, rasterViewsRef: rasterViewsRef, rasterCanvasRef: rasterCanvasRef, file: file, mode: mode, stateController: stateController.current }),\n                React.createElement(CursorCanvas, { mode: mode, ContentRef: ContentRef, canvasRef: canvasRef, globalState: globalState })))));\n};\nexport default CanvasImageEditor;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { getCurrentZoom } from '~/utils/canvas/mainCanvas';\nconst CursorCanvas = (props) => {\n    const { canvasRef, mode, globalState } = props;\n    const canvasCursorRef = useRef(null);\n    const { brushSize, eraseSize } = globalState || {};\n    const isShow = mode === 'BrushTool' || mode === 'EraseTool';\n    const [isCursor, setShowCursor] = useState(false);\n    useEffect(() => {\n        if (!canvasCursorRef.current && !isShow && !canvasRef.current)\n            return;\n        handleChangSize();\n        canvasRef.current.addEventListener('mousemove', handleMouseMove);\n        canvasRef.current.addEventListener('wheel', handleChangSize);\n        setShowCursor(isShow);\n        return () => {\n            canvasRef.current.removeEventListener('mousemove', handleMouseMove);\n            canvasRef.current.removeEventListener('wheel', handleChangSize);\n            setShowCursor(false);\n        };\n    }, [mode, brushSize, eraseSize]);\n    function handleChangSize(e) {\n        let size = 1;\n        switch (mode) {\n            case 'BrushTool':\n                size = brushSize | 1;\n                break;\n            case 'EraseTool':\n                size = eraseSize | 1;\n                break;\n            default:\n                break;\n        }\n        const ctx = canvasRef.current.getContext('2d');\n        const level = getCurrentZoom(ctx);\n        canvasCursorRef.current.width = Math.max(size, 3) * level;\n        canvasCursorRef.current.height = Math.max(size, 3) * level;\n    }\n    function handleMouseMove(e) {\n        const { offsetX, offsetY } = e.touches ? e.touches[0] : e;\n        const newX = offsetX - canvasCursorRef.current.width / 2;\n        const newY = offsetY - canvasCursorRef.current.height / 2;\n        canvasCursorRef.current.style.left = `${newX}px`;\n        canvasCursorRef.current.style.top = `${newY}px`;\n        // setShowCursor(\n        //   !IsOutRect(\n        //     newX,\n        //     newY,\n        //     canvasRef.current.clientLeft,\n        //     canvasRef.current.clientTop,\n        //     canvasRef.current.clientWidth,\n        //     canvasRef.current.clientHeight,\n        //   ),\n        // );\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"canvas\", { className: \"pointer-events-none absolute left-0 top-0 z-10 flex select-none rounded-full border  border-solid border-yellow-400\", ref: canvasCursorRef, style: { display: isCursor ? 'block' : 'none' } })));\n};\nexport default CursorCanvas;\n","import React, { useEffect } from 'react';\nimport { getCurrentZoom, updateCanvasSize } from '~/utils/canvas/mainCanvas';\nconst CanvasMain = (props) => {\n    const { canvasRef, ContentRef, ViewsRef, file, stateController, rasterCanvasRef, rasterViewsRef, mode } = props;\n    useEffect(() => {\n        if (!canvasRef.current || !ContentRef.current || file === null)\n            return;\n        ViewsRef.current.initializeCanvas(canvasRef.current);\n        stateController.initializeCanvas(ViewsRef.current);\n        rasterViewsRef.current.initializeCanvas(canvasRef.current, rasterCanvasRef.current, ViewsRef.current.bufferCanvas);\n        updateCanvasSize(canvasRef.current, rasterCanvasRef.current, ContentRef.current.offsetWidth, ContentRef.current.offsetHeight);\n        ViewsRef.current.loadFile(file).then(() => {\n            stateController.pushUndoStack();\n        });\n        const observer = new ResizeObserver((entries) => {\n            entries.forEach((entry) => {\n                ViewsRef.current.backgroundLayer && resizeCanvas();\n            });\n        });\n        observer.observe(ContentRef.current);\n        return () => {\n            observer.unobserve;\n            ViewsRef.current.cleanCanvas();\n            stateController.cleanState();\n            rasterViewsRef.current.cleanCanvas();\n        };\n    }, [file]);\n    useEffect(() => {\n        if (!canvasRef.current || !ContentRef.current || file === null)\n            return;\n        rasterViewsRef.current.cleanCanvas();\n    }, [mode]);\n    const resizeCanvas = () => {\n        if (canvasRef.current && canvasRef.current && file !== null) {\n            // adjust the canvas size to match the size of its container\n            const zoomLevel = getCurrentZoom(ViewsRef.current.ctx);\n            const x = ViewsRef.current.ctx.getTransform().e + ContentRef.current.offsetWidth - canvasRef.current.width;\n            const y = ViewsRef.current.ctx.getTransform().f + ContentRef.current.offsetHeight - canvasRef.current.height;\n            updateCanvasSize(canvasRef.current, rasterCanvasRef.current, ContentRef.current.offsetWidth, ContentRef.current.offsetHeight);\n            ViewsRef.current.ctx.translate(x, y);\n            ViewsRef.current.ctx.scale(zoomLevel, zoomLevel);\n            ViewsRef.current.draw();\n            rasterViewsRef.current.draw();\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"canvas\", { ref: canvasRef }),\n        React.createElement(\"canvas\", { className: \"pointer-events-none absolute inset-0 select-none\", ref: rasterCanvasRef })));\n};\nexport default CanvasMain;\n","import React, { useEffect, useState } from 'react';\nimport { Brush, PanTool as PanIcon, DeleteForever, AutoFixNormal, Undo, Redo, Crop } from '@mui/icons-material';\nimport dynamicClass, { Tools } from '~/canvas/ImageEditor/Tool';\nimport Panel from '../Panel/Panel';\nimport { useGlobalContext } from '~/store/context';\nimport { LAYOUT_SIZE } from '~/utils/canvas/constants';\nimport clsx from 'clsx';\nconst Menu = ({ ViewsRef, setFile, file, stateController, rasterViewsRef }) => {\n    const { mode, setMode, setShowPanel, isShowPanel } = useGlobalContext();\n    const [tool, setTool] = useState(null);\n    const { MENU_WIDTH } = LAYOUT_SIZE;\n    useEffect(() => {\n        if (ViewsRef.current.canvas && file !== null && mode !== null) {\n            setShowPanel(true);\n            const ToolClass = dynamicClass(mode);\n            const toolInstance = new ToolClass(ViewsRef.current, stateController, rasterViewsRef.current);\n            setTool(toolInstance);\n            if (mode === 'CropTool')\n                rasterViewsRef.current.setInstance(toolInstance);\n            toolInstance.registerEvent();\n            return () => {\n                toolInstance.unRegisterEvent();\n                setTool(null);\n            };\n        }\n    }, [mode]);\n    useEffect(() => {\n        !isShowPanel && setMode(null);\n    }, [isShowPanel]);\n    const handleDelte = () => {\n        setFile(null);\n        setTool(null);\n        setMode(null);\n        setShowPanel(false);\n    };\n    const tools = [\n        {\n            icon: React.createElement(Brush, null),\n            onClick: () => setMode(Tools.BrushTool.name),\n        },\n        {\n            icon: React.createElement(PanIcon, null),\n            onClick: () => setMode(Tools.PanTool.name),\n        },\n        {\n            icon: React.createElement(AutoFixNormal, null),\n            onClick: () => setMode(Tools.EraseTool.name),\n        },\n        {\n            icon: React.createElement(Crop, null),\n            onClick: () => setMode(Tools.CropTool.name),\n        },\n        {\n            icon: React.createElement(DeleteForever, null),\n            onClick: () => handleDelte(),\n        },\n        {\n            icon: React.createElement(Undo, null),\n            onClick: () => stateController.undo(),\n        },\n        {\n            icon: React.createElement(Redo, null),\n            onClick: () => stateController.redo(),\n        },\n    ];\n    const menuClass = clsx('inset-y-0', 'flex', 'flex-col', 'items-center', 'text-white');\n    return (file && (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: menuClass, style: { maxWidth: MENU_WIDTH } }, tools.map(({ icon, onClick }, index) => (React.createElement(\"button\", { key: index, onClick: onClick, className: \" row-auto cursor-pointer p-2  hover:bg-slate-500\" }, icon)))),\n        React.createElement(Panel, { title: mode, mode: mode, tool: tool, className: \" \" }))));\n};\nexport default Menu;\n","import React, { useEffect, useState } from 'react';\nimport CanvasColorPicker from './ColorPicker';\nimport Slider from '~/components/Slider';\nimport NumberInput from '~/components/NumberInput';\nimport { useGlobalContext } from '~/store/context';\nconst BrushPanel = (props) => {\n    const { tool } = props;\n    const { globalState, setGlobalState } = useGlobalContext();\n    const { brushColor, brushSize } = globalState || {};\n    const currentColor = brushColor || tool.color;\n    const currentSize = brushSize || tool.size;\n    const [color, setColor] = useState(currentColor);\n    const [size, setSize] = useState(currentSize);\n    useEffect(() => {\n        tool.setColor(color);\n    }, [tool]);\n    useEffect(() => {\n        tool.setSize(size);\n    }, [size]);\n    const handleSetColor = (newColor) => {\n        setColor(newColor);\n        tool.setColor(newColor);\n        setGlobalState({ ...globalState, brushColor: newColor });\n    };\n    const handleSetSize = (newSize) => {\n        setSize(newSize);\n        tool.setSize(newSize);\n        setGlobalState({ ...globalState, brushSize: newSize });\n    };\n    return (React.createElement(\"div\", { className: \"flex-1 flex-col space-y-2\" },\n        React.createElement(CanvasColorPicker, { colorValue: color, setColorCallBack: handleSetColor }),\n        React.createElement(Slider, { size: size, setSizeCallBack: handleSetSize, max: 1000 }),\n        React.createElement(NumberInput, { max: 1000, value: size, setValue: handleSetSize })));\n};\nexport default BrushPanel;\n","import React, { useEffect, useState } from 'react';\nconst CanvasColorPicker = (props) => {\n    // const canvasRef = useRef(null);\n    // const [selectedColor, setSelectedColor] = useState({ R: 255, G: 255, B: 255, A: 1 });\n    // useEffect(() => {\n    //   const canvas = canvasRef.current;\n    //   const context = canvas.getContext('2d');\n    //   // Draw a gradient on the canvas\n    //   const gradient = context.createLinearGradient(0, 0, 0, canvas.height);\n    //   gradient.addColorStop(0, 'rgba(255, 0, 0, 1)');\n    //   gradient.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\n    //   gradient.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\n    //   gradient.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\n    //   gradient.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\n    //   gradient.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\n    //   gradient.addColorStop(1, 'rgba(255, 0, 0, 1)');\n    //   context.fillStyle = gradient;\n    //   context.fillRect(0, 0, canvas.width, canvas.height);\n    // }, []);\n    // function handlePickerClick(event) {\n    //   const canvas = canvasRef.current;\n    //   const x = event.nativeEvent.offsetX;\n    //   const y = event.nativeEvent.offsetY;\n    //   const imageData = canvas.getContext('2d').getImageData(x, y, 1, 1);\n    //   const color = {\n    //     R: imageData.data[0],\n    //     G: imageData.data[1],\n    //     B: imageData.data[2],\n    //     A: imageData.data[3] / 255,\n    //   };\n    //   setSelectedColor(color);\n    // }\n    // const selectedColorString = `rgba(${selectedColor.R}, ${selectedColor.G}, ${selectedColor.B}, ${selectedColor.A})`;\n    const { setColorCallBack, colorValue } = props;\n    const [color, setColor] = useState(colorValue);\n    const handleColorChange = (event) => {\n        setColor(event.target.value);\n        setColorCallBack(event.target.value);\n    };\n    useEffect(() => {\n        setColor(colorValue);\n    }, []);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"input\", { type: \"color\", value: color, onChange: handleColorChange })));\n};\nexport default CanvasColorPicker;\n","import React, { useEffect, useState } from 'react';\nimport { useGlobalContext } from '~/store/context';\nconst CropPanel = (props) => {\n    const { tool } = props;\n    const { globalState, setGlobalState } = useGlobalContext();\n    const { eraseSize } = globalState || {};\n    const currentSize = eraseSize || tool.size;\n    const [size, setSize] = useState(currentSize);\n    useEffect(() => {\n        tool.draw();\n    }, [tool]);\n    const handleSetSize = (newSize) => { };\n    return React.createElement(\"div\", { className: \"flex-1 flex-col space-y-2\" });\n};\nexport default CropPanel;\n","import React, { useEffect, useState } from 'react';\nimport NumberInput from '~/components/NumberInput';\nimport Slider from '~/components/Slider';\nimport { useGlobalContext } from '~/store/context';\nconst ErasePanel = (props) => {\n    const { tool } = props;\n    const { globalState, setGlobalState } = useGlobalContext();\n    const { eraseSize } = globalState || {};\n    const currentSize = eraseSize || tool.size;\n    const [size, setSize] = useState(currentSize);\n    useEffect(() => {\n        tool.setSize(size);\n    }, [size]);\n    const handleSetSize = (newSize) => {\n        setSize(newSize);\n        tool.setSize(newSize);\n        setGlobalState({ ...globalState, eraseSize: newSize });\n    };\n    return (React.createElement(\"div\", { className: \"flex-1 flex-col space-y-2\" },\n        React.createElement(Slider, { size: size, setSizeCallBack: handleSetSize, max: 1000 }),\n        React.createElement(NumberInput, { max: 1000, value: size, setValue: handleSetSize })));\n};\nexport default ErasePanel;\n","import { Close } from '@mui/icons-material';\nimport React, { useMemo } from 'react';\nimport { useGlobalContext } from '~/store/context';\nimport BrushPanel from './Brush/BrushPanel';\nimport BrushTool from '~/canvas/ImageEditor/Tool/Brush';\nimport PanTool from '~/canvas/ImageEditor/Tool/Pan';\nimport EraseTool from '~/canvas/ImageEditor/Tool/Erase';\nimport ErasePanel from './Erase/ErasePanel';\nimport clsx from 'clsx';\nimport CropTool from '~/canvas/ImageEditor/Tool/Crop';\nimport CropPanel from './Crop/CropPanel';\nconst Panel = (props) => {\n    const { isShowPanel, setShowPanel } = useGlobalContext();\n    const { title, mode, tool } = props;\n    const panel = useMemo(() => {\n        switch (mode) {\n            case BrushTool.name:\n                return React.createElement(BrushPanel, { tool: tool });\n            case PanTool.name:\n                return React.createElement(React.Fragment, null);\n            case EraseTool.name:\n                return React.createElement(ErasePanel, { tool: tool });\n            case CropTool.name:\n                return React.createElement(CropPanel, { tool: tool });\n            default:\n                return React.createElement(React.Fragment, null);\n        }\n    }, [tool]);\n    const containerClass = clsx('h-full', 'flex-1', 'flex-col', 'w-panel-width');\n    return (React.createElement(React.Fragment, null, isShowPanel && (React.createElement(\"div\", { className: containerClass },\n        React.createElement(\"div\", { ...props, className: `flex  flex-row justify-around bg-navbar p-2` },\n            React.createElement(\"div\", { className: \"flex flex-col items-center space-y-3  border-b border-solid text-white\" }, title),\n            React.createElement(\"div\", null,\n                React.createElement(\"button\", { className: \"flex-1 text-white\", onClick: () => setShowPanel(false) },\n                    React.createElement(Close, null)))),\n        React.createElement(\"div\", { className: \"p-2\" },\n            \" \",\n            panel)))));\n};\nexport default Panel;\n","import clsx from 'clsx';\nimport React from 'react';\nconst NumberInput = (props) => {\n    const { min = 0, max = 100, value, setValue, className } = props;\n    const handleChange = (event) => {\n        const newValue = parseInt(event.target.value, 10);\n        if (!isNaN(newValue) && newValue >= min && newValue <= max) {\n            setValue(newValue);\n        }\n    };\n    const handleKeyDown = (event) => {\n        if (event.key === 'ArrowUp') {\n            event.preventDefault();\n            setValue(Math.min(value + 1, max));\n        }\n        else if (event.key === 'ArrowDown') {\n            event.preventDefault();\n            setValue(Math.max(value - 1, min));\n        }\n    };\n    const inputClasses = clsx(className, 'flex-1', 'w-full', 'rounded-lg', 'border-2', 'border-solid', 'border-white', 'bg-black', 'px-2', 'pt-2', 'pb-2', 'text-sm', 'text-white', 'focus:border-orange-400', 'focus:outline-none');\n    return (React.createElement(\"input\", { type: \"text\", value: value, onChange: handleChange, className: inputClasses, min: min, max: max, onKeyDown: handleKeyDown }));\n};\nexport default NumberInput;\n","import React from 'react';\nimport { useState } from 'react';\nconst Slider = (props) => {\n    const { setSizeCallBack, min = 1, max = 100, size } = props;\n    const [isDragging, setIsDragging] = useState(false);\n    const handleChange = (event) => {\n        const newValue = event.target.value;\n        const value = min && newValue < min ? min : max && newValue > max ? max : newValue;\n        setSizeCallBack(value);\n    };\n    const handleDragStart = () => {\n        setIsDragging(true);\n    };\n    const handleDragEnd = () => {\n        setIsDragging(false);\n    };\n    const percentage = (size / max) * 100;\n    const volumeGradient = `linear-gradient(to right, \n      rgba(255, 212, 71, 1) 0%, \n      rgba(255, 161, 71, 1) ${percentage}%, \n      rgba(255, 84, 84, 1) 100%)`;\n    const circlePosition = {\n        left: `calc(${percentage}% - 7px)`,\n    };\n    return (React.createElement(\"div\", { className: \"relative h-4 w-full rounded-full bg-gray-800\" },\n        React.createElement(\"div\", { className: \"h-full rounded-full\", style: { width: `${percentage}%`, background: volumeGradient } }),\n        React.createElement(\"div\", { className: `absolute top-0  ${isDragging ? 'block' : 'hidden'}`, style: circlePosition },\n            React.createElement(\"div\", { className: \"h-4 w-4 rounded-full border-2 border-yellow-500 bg-white\" })),\n        React.createElement(\"input\", { type: \"range\", min: min, max: max, value: size, onChange: handleChange, onMouseDown: handleDragStart, onTouchStart: handleDragStart, onTouchEnd: handleDragEnd, onTouchCancel: handleDragEnd, onMouseUp: handleDragEnd, className: \"absolute top-0 left-0 h-full w-full cursor-pointer opacity-0\" })));\n};\nexport default Slider;\n"],"names":[],"sourceRoot":""}