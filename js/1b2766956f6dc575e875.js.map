{"version":3,"file":"1b2766956f6dc575e875.js","mappings":";;;;;;;;;;;;;;AAAsC;AACtC,mBAAmB,mDAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;AC3EkB;AACtC,oBAAoB,mDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;ACvBrB;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;ACHA;AACE;AACE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6CAAI;AAC5B,0BAA0B,+CAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,4BAA4B,OAAO;AACnC,qCAAqC,8CAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;AC1FkB;AACtC,qBAAqB,mDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;ACnB2B;AAChB;AACjC;AACA,sBAAsB,6CAAM;AAC5B,IAAI,gDAAS;AACb;AACA;AACA;AACA,6BAA6B,oDAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,WAAW,0DAAmB,aAAa,0BAA0B;AACrE;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;ACtBE;AAC+B;AACzD;AACA,YAAY,0DAAmB,UAAU,sEAAsE;AAC/G,QAAQ,0DAAmB,CAAC,kEAAc,IAAI,gCAAgC;AAC9E;AACA,iEAAe,QAAQ,EAAC","sources":["webpack://leetcodecrack/./src/canvas/Ball.ts","webpack://leetcodecrack/./src/canvas/Brick.ts","webpack://leetcodecrack/./src/canvas/DrawObject.ts","webpack://leetcodecrack/./src/canvas/Game.ts","webpack://leetcodecrack/./src/canvas/Paddle.ts","webpack://leetcodecrack/./src/components/Chart/Breakout.tsx","webpack://leetcodecrack/./src/pages/Home/Canvas/Breakout.tsx"],"sourcesContent":["import DrawObject from './DrawObject';\nclass Ball extends DrawObject {\n    constructor(ctx, x, y, radius, color, canvas) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.color = color;\n        this.ctx = ctx;\n        this.dx = 0;\n        this.dy = 0;\n        this.canvas = canvas;\n    }\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);\n        this.ctx.fillStyle = this.color;\n        this.ctx.fill();\n        this.ctx.closePath();\n    }\n    update() {\n        this.move();\n    }\n    move() {\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x + this.radius * 2 > this.canvas.width || this.x - this.radius * 2 < 0) {\n            this.dx = -this.dx;\n        }\n        if (this.y + this.radius > this.canvas.height || this.y - this.radius < 0) {\n            this.dy = -this.dy;\n        }\n    }\n    checkNeedSpeedUp(count, brickLegth) {\n        if (count > brickLegth / 5) {\n            let speed = 8;\n            if (this.dx > 0)\n                this.dx = speed;\n            else\n                this.dx = -speed;\n            if (this.dy > 0)\n                this.dy = speed;\n            else\n                this.dy = -speed;\n        }\n        if (count > brickLegth / 2) {\n            let speed = 11;\n            if (this.dx > 0)\n                this.dx = speed;\n            else\n                this.dx = -speed;\n            if (this.dy > 0)\n                this.dy = speed;\n            else\n                this.dy = -speed;\n        }\n    }\n    start() {\n        this.dx = 5;\n        this.dy = -5;\n    }\n    collide(object) {\n        let xMin = object.x;\n        let xMax = object.x + object.width;\n        let yMin = object.y;\n        let yMax = object.y + object.height;\n        if (this.x + this.radius >= xMin &&\n            this.x - this.radius <= xMax &&\n            this.y + this.radius >= yMin &&\n            this.y - this.radius <= yMax) {\n            return true;\n        }\n        return false;\n    }\n}\nexport default Ball;\n","import DrawObject from './DrawObject';\nclass Brick extends DrawObject {\n    constructor(ctx, x, y, width, height, color) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.color = color;\n        this.status = 1;\n        this.ctx = ctx;\n        this.destroyed = false;\n    }\n    draw() {\n        if (this.status === 1) {\n            this.ctx.beginPath();\n            this.ctx.rect(this.x, this.y, this.width, this.height);\n            this.ctx.fillStyle = this.color;\n            this.ctx.fill();\n            this.ctx.closePath();\n        }\n    }\n}\nexport default Brick;\n","class DrawObject {\n    constructor() { }\n}\nexport default DrawObject;\n","import Ball from './Ball';\nimport Brick from './Brick';\nimport Paddle from './Paddle';\nclass Game {\n    constructor(ctx, canvas) {\n        this.ctx = ctx;\n        this.score = 0;\n        this.canvas = canvas;\n        let cw = (canvas.width = canvas.clientWidth);\n        let ch = (canvas.height = canvas.clientHeight);\n        this.ball = new Ball(ctx, canvas.width / 2, canvas.height - 30, 10, 'white', canvas);\n        this.paddle = new Paddle(ctx, canvas.width / 2 - 50, canvas.height - 10, 100, 10, 'red');\n        this.bricks = [];\n        this.createBricks();\n        this.registerEvent(canvas, this.ball, this.paddle);\n        this.score = 0;\n        this.lives = 3;\n    }\n    createBricks() {\n        let width = this.canvas.width / 15;\n        let paddingLeft = width;\n        let height = this.canvas.height / 20;\n        let paddingTop = height;\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 9; j++) {\n                this.bricks.push(new Brick(this.ctx, j * width + (paddingLeft * (j + 1)) / 2, paddingTop * (i + 1), width, height, 'yellow'));\n            }\n        }\n    }\n    draw() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.paddle.draw();\n        this.ball.draw();\n        this.bricks.forEach((brick) => !brick.destroyed && brick.draw());\n        this.drawScore();\n        this.drawLives();\n    }\n    update() {\n        this.checkCollision();\n        this.ball.checkNeedSpeedUp(this.score, this.bricks.length);\n        this.ball.update();\n        this.checkWin();\n    }\n    checkCollision() {\n        this.bricks.forEach((brick) => {\n            if (this.ball.collide(brick) && !brick.destroyed) {\n                this.score++;\n                this.ball.dy = -this.ball.dy;\n                brick.destroyed = true;\n            }\n        });\n        if (this.ball.collide(this.paddle)) {\n            this.ball.dy = -this.ball.dy;\n        }\n    }\n    checkWin() {\n        if (this.score === this.bricks.length) {\n            // alert('You win!');\n            document.location.reload();\n        }\n    }\n    drawScore() {\n        this.ctx.font = '16px Arial';\n        this.ctx.fillStyle = '#0095DD';\n        this.ctx.fillText('Score: ' + this.score, 8, 20);\n    }\n    drawLives() {\n        this.ctx.font = '16px Arial';\n        this.ctx.fillStyle = '#0095DD';\n        this.ctx.fillText('Lives: ' + this.lives, this.canvas.width - 65, 20);\n    }\n    registerEvent(canvas, ball, paddle) {\n        canvas.addEventListener('mousemove', function (e) {\n            let mouseX = e.offsetX;\n            paddle.update(mouseX);\n        });\n        document.addEventListener('keydown', function (e) {\n            console.log(e);\n            let val = 0;\n            if (e.key === 'd')\n                val = paddle.x + 1;\n            else if (e.key === 'a')\n                val = paddle.x - 1;\n            if (e.code == 'Space') {\n                ball.start();\n            }\n            paddle.update(val);\n        });\n    }\n}\nexport default Game;\n","import DrawObject from './DrawObject';\nclass Paddle extends DrawObject {\n    constructor(ctx, x, y, width, height, color) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.color = color;\n        this.ctx = ctx;\n    }\n    draw() {\n        this.ctx.fillStyle = this.color;\n        this.ctx.fillRect(this.x, this.y, this.width, this.height);\n    }\n    update(dx) {\n        this.x = dx - this.width / 2;\n    }\n}\nexport default Paddle;\n","import React, { useRef, useEffect } from 'react';\nimport Game from '~/canvas/Game';\nconst Breakout = (props) => {\n    const canvasRef = useRef(null);\n    useEffect(() => {\n        if (canvasRef.current) {\n            const canvas = canvasRef.current;\n            const ctx = canvas.getContext('2d');\n            const game = new Game(ctx, canvas);\n            function animate() {\n                game.draw();\n                game.update();\n                requestAnimationFrame(animate);\n            }\n            function start() {\n                requestAnimationFrame(animate);\n            }\n            start();\n        }\n    }, []);\n    return React.createElement(\"canvas\", { ...props, ref: canvasRef });\n};\nexport default Breakout;\n","import React from 'react';\nimport BreakoutCanvas from '~/components/Chart/Breakout';\nconst Breakout = () => {\n    return (React.createElement(\"div\", { className: \"m-auto flex w-full flex-col items-center justify-center\" },\n        React.createElement(BreakoutCanvas, { className: \"h-[50vh] w-[65vw]\" })));\n};\nexport default Breakout;\n"],"names":[],"sourceRoot":""}