{"version":3,"file":"fb264a8f1415db6f2f78.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAwC;AACgB;AACf;AACD;AAC6B;AACzB;AACR;AACY;AACJ;AACD;AACH;AACE;AACnC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAQ;AAC5C,yBAAyB,yDAAW,CAAC,8CAAU;AAC/C;AACA,kBAAkB,UAAU,iEAAoB,2BAA2B;AAC3E;AACA,cAAc,UAAU,mEAAsB,yBAAyB;AACvE;AACA,0BAA0B,kEAAiB,gBAAgB,KAAK;AAChE;AACA,aAAa;AACb;AACA,qBAAqB,UAAU,oEAAuB,mCAAmC;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY,0BAA0B,EAAE,yDAAO;AAC/C;AACA;AACA,oBAAoB,gBAAgB,EAAE,qDAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAc,CAAC,qDAAQ;AACvC;AACA;AACA;AACA,YAAY,kDAAc,CAAC,6DAAc,GAAG,mDAAmD;AAC/F;AACA,KAAK;AACL,YAAY,0DAAmB,UAAU,kCAAkC;AAC3E,QAAQ,0DAAmB,WAAW,4DAA4D;AAClG,YAAY,0DAAmB,UAAU,4EAA4E;AACrH,gBAAgB,0DAAmB,UAAU,mCAAmC;AAChF,oBAAoB,0DAAmB,CAAC,2EAAK,IAAI,qLAAqL;AACtO,oBAAoB,0DAAmB,WAAW,+BAA+B;AACjF,gBAAgB,0DAAmB,UAAU,mCAAmC;AAChF,oBAAoB,0DAAmB,CAAC,2EAAK,IAAI,sLAAsL;AACvO,oBAAoB,0DAAmB,WAAW,+BAA+B;AACjF,YAAY,0DAAmB,CAAC,2EAAK,IAAI,0LAA0L;AACnO,YAAY,0DAAmB,WAAW,+BAA+B;AACzE,YAAY,0DAAmB,CAAC,2EAAK,IAAI,wNAAwN;AACjQ,YAAY,0DAAmB,WAAW,+BAA+B;AACzE,YAAY,0DAAmB,CAAC,mDAAI,IAAI,4DAA4D;AACpG,YAAY,0DAAmB,UAAU,2BAA2B;AACpE,gBAAgB,0DAAmB,CAAC,0DAAM,IAAI,gEAAgE,cAAc,0DAAmB,CAAC,2DAAO,IAAI,gCAAgC;AAC3L;AACA,iEAAe,QAAQ,EAAC","sources":["webpack://leetcodecrack/./src/pages/Home/Member/Register.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Input from 'outsiderreact/dist/components/Input';\nimport Button from '~/components/Button';\nimport { Link } from 'react-router-dom';\nimport { validateRegexp, RegexpBindFactory } from '~/utils/validate';\nimport { useForm } from '~/hooks/useMyForm';\nimport useAuthApi from '~/api/auth';\nimport { setAlertDialog } from '~/store/global';\nimport { selectAuth, store } from '~/store';\nimport SvgICon from '~/components/SvgIcon';\nimport { setToken } from '~/store/auth';\nimport { useSelector } from 'react-redux';\nexport const RegisterInitial = {\n    email: 'test@gmail.com',\n    username: 'Victor',\n    password: 'ASD123!',\n    confirmPassword: 'ASD123!',\n};\nconst Register = () => {\n    const [isLoading, setLoading] = useState(false);\n    const authSelector = useSelector(selectAuth);\n    const validaList = {\n        email: [{ validate: validateRegexp.email, message: 'wrong format' }],\n        username: [\n            { validate: validateRegexp.require, message: 'need value' },\n            {\n                validate: RegexpBindFactory(/^([a-zA-Z\\d]){2,15}/),\n                message: 'need 15 ',\n            },\n        ],\n        password: [{ validate: validateRegexp.password, message: 'password wong format' }],\n        confirmPassword: [\n            {\n                validate: (data) => data === validator.values.password,\n                message: 'not same pasword',\n            },\n        ],\n    };\n    const { validator, handleSubmit } = useForm(RegisterInitial, validaList);\n    const onSubmit = handleSubmit(async (data, ispass) => {\n        if (ispass) {\n            const { POST_REGISTER } = useAuthApi();\n            if (data) {\n                setLoading(true);\n                const res = await POST_REGISTER(data);\n                await setLoading(false);\n                if (!res.data.status) {\n                    return;\n                }\n                store.dispatch(setToken(res.data.data));\n            }\n        }\n        else {\n            store.dispatch(setAlertDialog({ show: true, msg: JSON.stringify(validator.errors) }));\n        }\n    });\n    return (React.createElement(\"div\", { className: \"flex h-full w-full \" },\n        React.createElement(\"form\", { onSubmit: onSubmit, className: \"m-auto w-[50vw] space-y-6\" },\n            React.createElement(\"div\", { className: \"flex w-full sm:flex-col sm:space-x-0 lg:flex-row lg:space-x-3\" },\n                React.createElement(\"div\", { className: \"flex w-full flex-col\" },\n                    React.createElement(Input, { label: \"@E-mail\", className: \"w-full text-white\", type: \"text\", name: \"email\", onChange: validator.noWhiteSpaceChange, value: validator.values.email, placeholder: \"fill your mail\" }),\n                    React.createElement(\"span\", { className: \" text-orange-500\" }, validator.errors.email.message)),\n                React.createElement(\"div\", { className: \"flex w-full flex-col\" },\n                    React.createElement(Input, { label: \"Username\", className: \"w-full text-white\", type: \"text\", name: \"username\", onChange: validator.noWhiteSpaceChange, value: validator.values.username, placeholder: \"username\" }),\n                    React.createElement(\"span\", { className: \" text-orange-500\" }, validator.errors.username.message))),\n            React.createElement(Input, { label: \"Password\", className: \"w-full text-white\", type: \"password\", name: \"password\", onChange: validator.noWhiteSpaceChange, value: validator.values.password, placeholder: \"Password\" }),\n            React.createElement(\"span\", { className: \" text-orange-500\" }, validator.errors.password.message),\n            React.createElement(Input, { label: \"Conform Password\", className: \"w-full text-white\", type: \"password\", name: \"confirmPassword\", onChange: validator.noWhiteSpaceChange, value: validator.values.confirmPassword, placeholder: \"Conform Password\" }),\n            React.createElement(\"span\", { className: \" text-orange-500\" }, validator.errors.confirmPassword.message),\n            React.createElement(Link, { className: \"flex font-bold text-orange-400\", to: \"/member\" }, \"Login?\"),\n            React.createElement(\"div\", { className: \"flex w-full \" },\n                React.createElement(Button, { isWhite: validator.isPass, type: \"submit\", className: \"m-auto\" }, isLoading ? React.createElement(SvgICon, { className: \"w-4\", name: \"spin\" }) : 'Submit')))));\n};\nexport default Register;\n"],"names":[],"sourceRoot":""}