{"version":3,"file":"19a6577b61594ee954cf.js","mappings":";;;;;;;;;;;;;;AAA4B;AAC5B;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAAK;AAClC;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;AChEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;;;;ACVsC;AAC5B;AACc;AAC7C;AACA,sBAAsB,6CAAM;AAC5B,4BAA4B,+CAAQ;AACpC,4BAA4B,+CAAQ;AACpC,mBAAmB,gEAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA,KAAK;AACL,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,QAAQ,0DAAmB,UAAU,uDAAuD;AAC5F,8BAA8B,0DAAmB,UAAU,gEAAgE;AAC3H,gBAAgB,0DAAmB,UAAU,0BAA0B;AACvE,gBAAgB,0DAAmB,YAAY,sHAAsH;AACrK,YAAY,0DAAmB,aAAa,0FAA0F;AACtI,QAAQ,0DAAmB,UAAU,oCAAoC;AACzE,YAAY,0DAAmB,CAAC,+CAAM,IAAI,uBAAuB;AACjE,YAAY,0DAAmB,CAAC,+CAAM,IAAI,iBAAiB;AAC3D;AACA,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;;;;ACtDP;AAC2C;AACrE;AACA,YAAY,0DAAmB,UAAU,sEAAsE;AAC/G,QAAQ,0DAAmB,CAAC,2EAAiB,IAAI,iDAAiD;AAClG;AACA,iEAAe,WAAW,EAAC","sources":["webpack://leetcodecrack/./src/canvas/ImageEditor/Line.ts","webpack://leetcodecrack/./src/canvas/ImageEditor/Point.ts","webpack://leetcodecrack/./src/components/Chart/CanvasImageEditor.tsx","webpack://leetcodecrack/./src/pages/Home/Canvas/ImageEditor.tsx"],"sourcesContent":["import Point from './Point';\nclass Line {\n    constructor(ctx, color, canvas) {\n        this.isDrawStart = false;\n        this.getClientOffset = (e) => {\n            const { canvas } = this;\n            const { pageX, pageY } = e.touches ? e.touches[0] : e;\n            const rect = canvas.getBoundingClientRect();\n            const x = pageX - rect.left;\n            const y = pageY - rect.top;\n            return {\n                x,\n                y,\n            };\n        };\n        this.mouseDown = (e) => {\n            const clientPoint = this.getClientOffset(e);\n            this.lastPoint.setPoint(clientPoint.x, clientPoint.y);\n            this.isDrawStart = true;\n        };\n        this.mouseMove = (e) => {\n            if (!this.isDrawStart)\n                return;\n            this.draw(e);\n            // this.lineCoordinates = this.getClientOffset(event);\n            this.clearCanvas();\n        };\n        this.mouseUp = (event) => {\n            console.log();\n            this.isDrawStart = false;\n        };\n        this.clearCanvas = () => {\n            // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        };\n        this.ctx = ctx;\n        this.lastPoint = new Point(0, 0);\n        this.color = color;\n        this.canvas = canvas;\n        this.registerEvent(canvas);\n    }\n    draw(e) {\n        const { canvas, ctx } = this;\n        const { pageX, pageY } = e.touches ? e.touches[0] : e;\n        const rect = canvas.getBoundingClientRect();\n        const x = pageX - rect.left;\n        const y = pageY - rect.top;\n        ctx.beginPath();\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 5;\n        ctx.moveTo(this.lastPoint.x, this.lastPoint.y);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n        const clientPoint = this.getClientOffset(e);\n        this.lastPoint.setPoint(clientPoint.x, clientPoint.y);\n    }\n    registerEvent(canvas) {\n        canvas.addEventListener('mousedown', this.mouseDown.bind(this));\n        canvas.addEventListener('mousemove', this.mouseMove.bind(this));\n        canvas.addEventListener('mouseup', this.mouseUp.bind(this));\n        canvas.addEventListener('touchstart', this.mouseDown.bind(this));\n        canvas.addEventListener('touchmove', this.mouseMove.bind(this));\n        canvas.addEventListener('touchend', this.mouseUp.bind(this));\n    }\n}\nexport default Line;\n","class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    setPoint(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\nexport default Point;\n","import React, { useRef, useEffect, useState } from 'react';\nimport Button from '../Button';\nimport Line from '~/canvas/ImageEditor/Line';\nconst CanvasImageEditor = (props) => {\n    const canvasRef = useRef(null);\n    const [file, setFile] = useState(null);\n    const [mode, setMode] = useState(null);\n    const modes = [Line];\n    const onClickFile = (e) => {\n        setFile(e.target.files[0]);\n    };\n    const onDeleteFile = (e) => {\n        setFile(null);\n    };\n    const onDraw = () => {\n        setMode('draw');\n    };\n    useEffect(() => {\n        if (canvasRef.current && file !== null) {\n            const canvas = canvasRef.current;\n            const ctx = canvasRef.current.getContext('2d');\n            const image = new Image();\n            image.onload = () => {\n                let ratio = Math.min(canvas.width / image.width, canvas.height / image.height);\n                let x = (canvas.width - image.width * ratio) / 2;\n                let y = (canvas.height - image.height * ratio) / 2;\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.drawImage(image, 0, 0, image.width, image.height, x, y, image.width * ratio, image.height * ratio);\n            };\n            image.src = URL.createObjectURL(file);\n            // const canvas = canvasRef.current;\n            // const ctx = canvasRef.current.getContext('2d');\n            const line = new modes[0](ctx, 'white', canvas);\n        }\n        else {\n            const canvas = canvasRef.current;\n            const ctx = canvasRef.current.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }\n    }, [file]);\n    useEffect(() => {\n        if (canvasRef.current && file !== null) {\n        }\n    }, []);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: ` relative border-solid border-yellow-400` },\n            file === null && (React.createElement(\"div\", { className: \"absolute inset-0 flex items-center justify-center\" },\n                React.createElement(\"div\", { className: \" text-white\" }, \"please click or drag file\"),\n                React.createElement(\"input\", { onChange: onClickFile, className: \" absolute inset-0 z-10 cursor-pointer opacity-0\", type: \"file\", accept: \"image/*\" }))),\n            React.createElement(\"canvas\", { ...props, ref: canvasRef, width: window.innerWidth * 0.6, height: window.innerHeight / 2 })),\n        React.createElement(\"div\", { className: \"flex w-full space-x-3\" },\n            React.createElement(Button, { onClick: onDeleteFile }, \" delete File\"),\n            React.createElement(Button, { onClick: onDraw }, \" draw mode\"))));\n};\nexport default CanvasImageEditor;\n","import React from 'react';\nimport CanvasImageEditor from '~/components/Chart/CanvasImageEditor';\nconst ImageEditor = () => {\n    return (React.createElement(\"div\", { className: \"m-auto flex w-full flex-col items-center justify-center\" },\n        React.createElement(CanvasImageEditor, { className: \" border border-solid border-white \" })));\n};\nexport default ImageEditor;\n"],"names":[],"sourceRoot":""}