{"version":3,"file":"9842013c57221c4b9691.js","mappings":";;;;;;;;;;;;;;;AAA+B;AAC/B;AACA,YAAY,gDAAmB,UAAU,+CAA+C;AACxF,oCAAoC,gDAAmB,WAAW,mBAAmB;AACrF,QAAQ,gDAAmB,0BAA0B,WAAW,0CAA0C,wCAAwC;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qBAAqB,+HAA+H;AAChK;AACA,uBAAuB;AACvB,iEAAe,KAAK,EAAC;AACrB;;;;;;;;;;;;;;;;ACfqE;AACtB;AAC/C;AACA;AACA,oBAAoB,gDAAS;AAC7B,2BAA2B,iDAAU;AACrC;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,+DAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,+DAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,iEAAiB;AAC7B;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,+DAAe;AAC3B;AACA;AACA,aAAa;AACb;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;;;;AC7DA;AAC4D;AACtD;AACgB;AACzC;AACP,kEAAkE,khNAAW,SAAS,GAAG,QAAQ;AACjG,gBAAgB,mDAAY;AAC5B;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP,gBAAgB,mDAAY;AAC5B,oBAAoB,khNAAW,SAAS,GAAG,QAAQ;AACnD,mBAAmB,oCAAoC;AACvD,KAAK;AACL;AACA,sBAAsB,+DAAe;AACrC;AACA,qDAAqD,kBAAkB;AACvE;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oCAAoC,+DAAe;AACnD;AACA,qCAAqC,iDAAU,IAAI,khNAAW,SAAS;AACvE;AACA,qBAAqB;AACrB;AACA,qDAAqD,yBAAyB;AAC9E,yBAAyB;AACzB,qBAAqB;AACrB,oBAAoB,+DAAe;AACnC;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAc,CAAC,6DAAc,GAAG,gEAAgE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpFqD;AAC9C;AACP,wBAAwB,6CAAM;AAC9B,gCAAgC,+CAAQ;AACxC;AACA,gCAAgC,+CAAQ;AACxC,sBAAsB,6CAAM;AAC5B,sBAAsB,6CAAM;AAC5B;AACA,gBAAgB,cAAc;AAC9B,oBAAoB,0BAA0B;AAC9C;AACA;AACA,gBAAgB,cAAc;AAC9B,oBAAoB,6CAA6C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4CAA4C;AACrF,6BAA6B;AAC7B;AACA;AACA,yCAAyC,mDAAmD;AAC5F,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;;;;;;;;;;;;;;;AC9DO;AACP;AACA;AACA,2FAA2F,GAAG;AAC9F;AACO;AACP;AACA","sources":["webpack://leetcodecrack/./node_modules/outsiderreact/dist/components/Input/index.js","webpack://leetcodecrack/./src/api/auth.ts","webpack://leetcodecrack/./src/api/base.ts","webpack://leetcodecrack/./src/hooks/useMyForm.tsx","webpack://leetcodecrack/./src/utils/validate.ts"],"sourcesContent":["import * as React from 'react';\r\nconst Input = (props) => {\r\n    return (React.createElement(\"div\", { className: `flex flex-col ` + props.className },\r\n        props.label != undefined && React.createElement(\"span\", { className: \"flex\" }, props.label),\r\n        React.createElement(\"input\", Object.assign({}, props, { \"data-testid\": \"add-word-input\", style: { backgroundColor: props.backgroundColor }, className: `w-auto rounded-md border-2\n            border-solid border-opacity-50 bg-black\n          px-2 pt-5 pb-4 text-sm\n           leading-4  \n           tracking-wide text-white outline-none placeholder:opacity-30\n           focus:border-orange-400\n            focus:opacity-100\n          ${props.inputClassName}`, type: props.type, placeholder: props.placeholder, value: props.value, autoFocus: props.autoFocus, onChange: props.onChange }))));\r\n};\r\nInput.defaultProps = { autoFocus: false };\r\nexport default Input;\r\n//# sourceMappingURL=index.js.map","import { cleanTokenStorage, setTokenStorage } from '~/utils/storage';\nimport { privateApi, publicApi } from './base';\nconst subPath = 'auth';\nconst useAuthApi = () => {\n    const authApi = publicApi(subPath);\n    const privateAuthApi = privateApi(subPath);\n    const POST_REGISTER = async (userDate) => {\n        const resp = await authApi.post('register', {\n            ...userDate,\n        });\n        if (resp.data.data)\n            setTokenStorage(resp.data.data);\n        return resp;\n    };\n    const POST_LOGIN = async (userDate) => {\n        const resp = await authApi.post('login', {\n            ...userDate,\n        });\n        if (resp.data.data)\n            setTokenStorage(resp.data.data);\n        return resp;\n    };\n    const GET_REFRESH = async () => {\n        const resp = await privateAuthApi.get('refresh', {\n            withCredentials: true,\n        });\n        return resp;\n    };\n    const GET_TokenTest = async () => {\n        const resp = await privateAuthApi.get('test');\n        return resp;\n    };\n    const GET_LOGOUT = async () => {\n        const resp = await authApi.get('logout', {\n            withCredentials: true,\n        });\n        if (resp.data.status)\n            cleanTokenStorage();\n        return resp;\n    };\n    // const GET_USER = async () => {\n    //   const resp = await (\n    //     await fetch(`${process.env.API_URL}/auth/login/success`, {\n    //       method: 'get',\n    //       credentials: 'include',\n    //     })\n    //   ).json();\n    //   console.log(resp);\n    //   if (resp.data) setTokenStorage(resp.data);\n    //   return resp;\n    // };\n    const GET_USER = async () => {\n        const resp = await authApi.get('login/success', {\n            withCredentials: true,\n        });\n        if (resp.data.data)\n            setTokenStorage(resp.data.data);\n        return resp;\n    };\n    return { POST_REGISTER, GET_REFRESH, POST_LOGIN, GET_TokenTest, GET_USER, GET_LOGOUT };\n};\nexport default useAuthApi;\n","import axios from 'axios';\nimport { cleanTokenStorage, getTokenStorage, setTokenStorage } from '~/utils/storage';\nimport { store } from '~/store';\nimport { setAlertDialog } from '~/store/global';\nexport const publicApi = (subPath = '', isDummyData = false) => {\n    const url = isDummyData ? 'https://dummyapi.io/data/v1/' : `${process.env.API_URL}/${subPath}`;\n    const api = axios.create({\n        baseURL: url,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n    api.interceptors.request.use((config) => {\n        return config;\n    }, (error) => {\n        return Promise.reject(error);\n    });\n    api.interceptors.response.use((response) => {\n        checkErrorCdoe(response);\n        return response;\n    }, (error) => {\n        if (error.response.status === 401)\n            return error.response;\n        checkErrorCdoe(error.response);\n        return error.response;\n    });\n    return api;\n};\nexport const privateApi = (subPath = '') => {\n    const api = axios.create({\n        baseURL: `${process.env.API_URL}/${subPath}`,\n        headers: { 'Content-Type': 'application/json' },\n    });\n    api.interceptors.request.use(async (config) => {\n        const token = getTokenStorage();\n        if (config.headers)\n            config.headers.authorization = `Bearer ${token.accessToken}`;\n        return config;\n    }, (error) => {\n        return Promise.reject(error);\n    });\n    api.interceptors.response.use(async (response) => {\n        checkErrorCdoe(response);\n        return response;\n    }, async (error) => {\n        if (error.response) {\n            // Access Token was expired\n            if (error.response.status === 401) {\n                const storedToken = getTokenStorage();\n                try {\n                    const rs = await axios.post(`${process.env.API_URL}/auth/refresh`, {\n                        refreshToken: storedToken.refreshToken,\n                    }, {\n                        headers: {\n                            authorization: `Bearer ${storedToken.refreshToken}`,\n                        },\n                    });\n                    setTokenStorage(rs.data.data);\n                    return api(error.config);\n                }\n                catch (_error) {\n                    console.log(_error);\n                    if (_error.response.status === 401) {\n                        cleanTokenStorage();\n                    }\n                    checkErrorCdoe(_error.response, _error.response.status);\n                    return Promise.reject(_error);\n                }\n            }\n        }\n        return Promise.reject(error);\n    });\n    return api;\n};\nasync function checkErrorCdoe(response, catchError = 'good') {\n    switch (response.data.status) {\n        case false:\n            store.dispatch(setAlertDialog({ show: true, msg: JSON.stringify(response.data), title: 'Error' }));\n            break;\n        case true:\n            break;\n        default:\n            break;\n    }\n}\n","import { useEffect, useState, useRef, } from 'react';\nexport const useForm = (initialStates, validateList, isStrean = true) => {\n    const isSubmitted = useRef(false);\n    const [values, setValues] = useState(initialStates);\n    const initializeErrors = initialStates;\n    const [errors, setErrors] = useState(initializeErrors);\n    const isPassRef = useRef(false);\n    const refErrors = useRef(errors);\n    const handleChange = (e) => {\n        const { value, name } = e.target;\n        setValues({ ...values, [name]: value });\n    };\n    function noWhiteSpaceChange(e) {\n        const { value, name } = e.target;\n        setValues({ ...values, [name]: value.replace(/\\s/g, '') });\n    }\n    const validating = () => {\n        if (isSubmitted.current) {\n            let isPassed = true;\n            if (validateList) {\n                for (const [key, vList] of Object.entries(validateList)) {\n                    for (const v of vList) {\n                        const validateIspass = v.validate(values[key]);\n                        if (isPassed)\n                            isPassed = isPassRef.current = validateIspass;\n                        validateIspass\n                            ? (refErrors.current = {\n                                ...refErrors.current,\n                                [key]: { pass: v.validate(values[key]), message: '' },\n                            })\n                            : (refErrors.current = {\n                                ...refErrors.current,\n                                [key]: { pass: v.validate(values[key]), message: v.message },\n                            });\n                        if (!validateIspass)\n                            break;\n                    }\n                }\n                setErrors(refErrors.current);\n                isStrean ? (isSubmitted.current = true) : (isSubmitted.current = false);\n            }\n        }\n    };\n    useEffect(() => {\n        validating();\n    }, [values]);\n    const handleSubmit = (data) => {\n        return (event) => {\n            event.preventDefault();\n            isSubmitted.current = true;\n            validating();\n            data(values, isPassRef.current);\n        };\n    };\n    const validator = {\n        values,\n        errors,\n        handleChange,\n        noWhiteSpaceChange,\n        isPass: isPassRef.current,\n    };\n    return { handleSubmit, validator };\n};\n","export const validateRegexp = {\n    email: RegexpBindFactory(/^\\w+((-\\w+)|(\\.\\w+))*\\@\\w+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z]+$/),\n    require: RegexpBindFactory(/\\w+/),\n    password: RegexpBindFactory(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{7,}$/),\n};\nexport function RegexpBindFactory(regexp) {\n    return regexp.test.bind(regexp);\n}\n"],"names":[],"sourceRoot":""}